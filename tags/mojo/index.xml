<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mojo on Suburban Nerd</title><link>http://marcus.nordaaker.com/tags/mojo/</link><description>Recent content in Mojo on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Code released under the Apache 2.0 license.</copyright><lastBuildDate>Sun, 04 Dec 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://marcus.nordaaker.com/tags/mojo/index.xml" rel="self" type="application/rss+xml"/><item><title>Visualization of the Mojo class tree.</title><link>http://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>In this visualization, I've tried to group the various Mojo classes by function and color code them. The classes are placed in layers, and related groups are close to each other. Note that I've dropped abstract base classes and Mojolicious related subclasses from this visualization, as well as some servers and all the commands. This might be useful as a quick reference, if you want to print it, you can get the PDF here.</description></item><item><title>$ mojo get is X-ray for the web</title><link>http://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>Mojolicious isn't just useful for perl coders, it also includes a command line tool that can be quite handy for anybody who wants to get info from the web:
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \ URL [SELECTOR] [COMMANDS] mojo get / mojo get mojolicio.us mojo get -v -r google.com mojo get --method POST --content 'trololo' mojolicio.us mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us mojo get mojolicio.us 'head &amp;gt; title' text mojo get mojolicio.</description></item><item><title>Sebastian on MS IIS' FastCGI support.</title><link>http://marcus.nordaaker.com/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</link><pubDate>Tue, 11 Aug 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</guid><description> 09:30 there is absolutely no way to detect the server base as far as i can see 09:33 you really have to do horrible things with PATH_TRANSLATED... 09:34 seriously... was that thing developed by a bunch of monkeys? 10:00 yeah, they were trying to write shakespeare's collected works, and ended up with IIS instead</description></item><item><title>Bootylicious - Single file Mojo based blog</title><link>http://marcus.nordaaker.com/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</link><pubDate>Thu, 06 Aug 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</guid><description>As you might know, Sebastian recently added single-file support to his Mojolicious framework. Viacheslav Tikhanovskii has taken this functionality and run with it, producing bootylicious - a ~280 SLOC web log system. It sorts a directory of POD formatted blog posts, and even supports RSS. I think these single file apps is an excellent way to demonstrate your framework. I actually remember this as being a selling point for Maypole back in the days :)</description></item><item><title>Awesome route graph with MojoX::Routes::AsGraph</title><link>http://marcus.nordaaker.com/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</link><pubDate>Wed, 27 May 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</guid><description>We are testing out Sebastian's Mojolicious framework for use in a Nordaaker project. Mojolicious uses an routes-based dispatcher, which is nice, but sometimes it's hard to keep track of how everything is routed. Luckily Melo already has an excellent solution for this:
Just check out MojoX::Routes::AsGraph , which can generate these lovely graphs for you. It can even generate Ascii graphs, if you're a hard-core console user (Thanks to vti for telling me about that, as well as showing me this module in the first place :).</description></item></channel></rss>