<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Perl on marcus</title><link>https://marcus.means.no/tags/perl/</link><description>Recent content in Perl on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Wed, 23 Jul 2025 00:30:25 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/perl/index.xml" rel="self" type="application/rss+xml"/><item><title>Perl 7 Announced</title><link>https://marcus.means.no/post/2020-06-24-perl-7-announced/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0200</pubDate><guid>https://marcus.means.no/post/2020-06-24-perl-7-announced/</guid><description>&lt;p>Not going to lie, This Perl 7 announcement is the best news I&amp;rsquo;ve heard in a while. My biggest outstanding question is
if the are going to be enabling signatures in this release. I really hope so.&lt;/p>
&lt;p>Regardless, you can be sure that the Mojo team is 100% behind pushing Perl forward, and I hope to see some exciting
major Perl releases in the years to come.
&lt;a href="http://blogs.perl.org/users/ovid/2019/10/cor---a-proposal-for-core-perl-oo.html">Cor&lt;/a> and async/await in the core are
high on my personal list.&lt;/p></description></item><item><title>Coturn for WebRTC NAT Traversal</title><link>https://marcus.means.no/post/coturn-for-webrtc-nat-traversal/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0200</pubDate><guid>https://marcus.means.no/post/coturn-for-webrtc-nat-traversal/</guid><description>&lt;p>This article will show you how to set up &lt;a href="https://github.com/coturn/coturn">Coturn&lt;/a>. This is a service that allows
hosts behind NAT to communicate peer to peer with WebRTC. STUN is helping to negotiate port/ip and TURN will proxy the
actual traffic if all else fails.&lt;/p>
&lt;p>We&amp;rsquo;re using this with &lt;a href="https://convos.chat/">Convos&lt;/a>&amp;rsquo; video IRC feature, but the same applies to other WebRTC projects.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>I&amp;rsquo;ll be assuming you&amp;rsquo;re on Ubuntu for this tutorial, so users on other distros will have to adjust the setup for
their environment. First we&amp;rsquo;ll install the actual ubuntu package. If you don&amp;rsquo;t already have it, you will also need
letsencrypt to generate valid SSL certs.&lt;/p></description></item><item><title>Porting AnsibleModule to Perl.</title><link>https://marcus.means.no/post/2015-08-31-porting-ansiblemodule-to-perl/</link><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2015-08-31-porting-ansiblemodule-to-perl/</guid><description>&lt;pre>&lt;code>“All animals are equal, but some animals are more equal than others.”
― George Orwell, Animal Farm
&lt;/code>&lt;/pre>
&lt;p>Ansible is a great orchestration tool, which I&amp;rsquo;ve used extensively for the last years to build infrastructure, or even
to accomplish routine tasks like restarting a group of web servers one by one or patching a bunch of servers for
critical security issues.&lt;/p>
&lt;p>Ansible is written in Python, but you can write modules in anything that can generate JSON. In fact, I wrote about
&lt;a href="2014-10-05-building-ansible-modules-with-perl-and-mojolicious">making a Perl based cloudflare module&lt;/a> earlier.
However, to quote the official documentation:&lt;/p></description></item><item><title>Building Ansible Modules with Perl and Mojolicious</title><link>https://marcus.means.no/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</guid><description>&lt;p>While setting up &lt;a href="http://theoutput.co/">Output&lt;/a>, we decided to automate all our
infrastructure using &lt;a href="http://ansible.com/">Ansible&lt;/a>. This lets us easily do
zero downtime releases and create new workers as needed to scale. We&amp;rsquo;ve got
roles for haproxy, postgresql, nginx, our app servers and a lot more. One thing
we&amp;rsquo;ve been handling manually so far is DNS. We&amp;rsquo;re happy Cloudflare users, and
they have one of the best DNS admin tools I&amp;rsquo;ve used, but still I felt like we
could do better.&lt;/p></description></item><item><title>Mojolicious::Plugin::RenderSteps</title><link>https://marcus.means.no/post/2014-05-27-mojoliciouspluginrendersteps/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2014-05-27-mojoliciouspluginrendersteps/</guid><description>&lt;p>This weekend I attended the &lt;a href="http://mojoconf.org/">MojoConf&lt;/a> hackathon, which was great fun. I had
some interesting talks with the rest of the core team, and I collaborated with
Joel Berger on &lt;a href="http://github.com/marcusramberg/mojo-pg">Mojo::PG&lt;/a>, an adaptor for the Mojo::IOLoop for Postgres.
Joel is almost done with a Pool implementation as well, and we&amp;rsquo;ll probably be
on CPAN sometime this week.&lt;/p>
&lt;p>I also wrote a simple plugin-helper, which I think greatly simplify working
with async controllers in Mojolicious. This what you have to do to setup async
actions in mojolicious at the moment:&lt;/p></description></item><item><title>Perl needs modern garbage collection</title><link>https://marcus.means.no/post/2012-09-13-perl-needs-modern-garbage-collection/</link><pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2012-09-13-perl-needs-modern-garbage-collection/</guid><description>&lt;p>
 Chromatic just wrote a list of
 &lt;a
 href="http://www.modernperlbooks.com/mt/2012/09/features-perl-5-needs-in-2012.html"
 >important features that Perl 5 needs&lt;/a
 >. While I agree with most of the listed ones (and in fact
 &lt;a href="http://marcus.nordaaker.com/moving-to-moose-hackathon-2013/"
 >contributed to the new p5-mop&lt;/a
 >
 proposal during the recent Hackathon), I found one feature curiously missing.
&lt;/p>
&lt;div>&lt;/div>
&lt;div>
 I mean, JWZ pointed this out in 1998;
 &lt;a href="http://www.jwz.org/doc/gc.html"
 >Perl garbage collection is a bad joke&lt;/a
 >. That was 14 years ago, and the situation is the same. It is trivial to
 create a circular reference and trip it up. Especially when you are doing
 event-driven code where callbacks are common, it is quite easy to close over
 some variable and create a leak. Languages like C#, Ruby and Java has this
 sorted already with variants of mark and sweep-based systems, Python has built
 in cycle detectors in their ref count implementation, and even Objective-C
 manages to detect cycles fairly well with their new compile-time automated
 reference counting.&amp;nbsp;
&lt;/div>
&lt;div>&lt;/div>
&lt;div>&lt;/div>
&lt;div>
 Don't worry so much about adding sugar to the syntax. This is a feature Perl
 really needs.&amp;nbsp;
&lt;/div></description></item><item><title>Moving to Moose Hackathon 2012</title><link>https://marcus.means.no/post/2012-09-01-moving-to-moose-hackathon-2013/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2012-09-01-moving-to-moose-hackathon-2013/</guid><description>&lt;p>
 This week, my excellent Perl Mongers group Oslo.pm, led by the excellent
 &lt;a href="http://twitter.com/sjoshuan">Salve&lt;/a>,  has arranged an event we
 called the Moving to Moose Hackathon 2012. The purpose of this event was to
 promote the adoption of a MOP (Meta Object Protocol) in Perl development. To
 this effect, we had two groups, the Perl RDF community, looking to adopt moose
 in their modules, and
 &lt;a href="http://search.cpan.org/~stevan/">Stevan Little&lt;/a> and his merry gang
 of p5-mop developers, looking to create a proposal for a MOP in the Perl core
 itself, to replace the venerable blessed hash object model.
&lt;/p></description></item><item><title>Debugging LWP with mitmproxy</title><link>https://marcus.means.no/post/2012-07-12-debugging-lwp-with-mitmproxy/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2012-07-12-debugging-lwp-with-mitmproxy/</guid><description>&lt;p>Are you using an LWP app, and trying to debug it? My personal preferences is using &lt;a href="http://mitmproxy.org">mitmproxy&lt;/a>.&lt;/p>
&lt;p>To get LWP to use mitmproxy, set the following ENV variables:&lt;/p>
&lt;p>PERL_LWP_ENV_PROXY=1 HTTPS_PROXY='http://localhost:8080/' ./script/myapp&lt;/p>
&lt;p>Note, this also works for apps using Mojo::UserAgent, except you don't need the first ENV variable.&lt;/p></description></item><item><title>A Mojolicious 2011.</title><link>https://marcus.means.no/post/2011-12-31-a-mojolicious-2011/</link><pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-12-31-a-mojolicious-2011/</guid><description>&lt;p>
 &lt;em
 >A new year is upon us, and I figured this would be good time to take a look
 at the improvements in the Mojolicious framework in the last year. There has
 been a dazzling number of releases, 122 in fact, including the current
 release, 2.42&lt;/em
 >.
&lt;/p>
&lt;p>
 Some of the releases were mere bugfix releases, with nothing noteworthy to
 add, but I&amp;#8217;ll try going through the major releases in the last year.
 When this year started, we already had a robust MVC Web framework, and through
 the year you will note that a lot of the work has gone into building a first
 class real time web framework. 2010 ended with 1.0, codename Snow Flake,
 released 26th of december 2010. 1.01 fixed a couple of bugs, and added TLS
 Authentication.
&lt;/p></description></item><item><title>Visualization of the Mojo class tree.</title><link>https://marcus.means.no/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>&lt;p>
 &lt;a
 href="http://marcus.nordaaker.com/wp-content/uploads/2011/12/Mojolicious-Classes1.jpg"
 >&lt;img
 src="http://marcus.nordaaker.com/wp-content/uploads/2011/12/Mojolicious-Classes1.jpg"
 alt=""
 title="Mojolicious Classes"
 width="806"
 height="546"
 class="alignleft size-full wp-image-3620"
 />&lt;/a>
&lt;/p>
&lt;p>
 In this visualization, I've tried to group the various Mojo classes by
 function and color code them. The classes are placed in layers, and related
 groups are close to each other. Note that I've dropped abstract base classes
 and Mojolicious related subclasses from this visualization, as well as some
 servers and all the commands.
&lt;/p>
&lt;p>
 This might be useful as a quick reference, if you want to print it, you can
 get the PDF
 &lt;a
 href="https://github.com/marcusramberg/mojo-classes/blob/master/Mojolicious%20Classes.pdf?raw=true"
 >here&lt;/a
 >.
&lt;/p></description></item><item><title>$ mojo get is X-ray for the web</title><link>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>&lt;p>
 Mojolicious isn't just useful for perl coders, it also includes a command line
 tool that can be quite handy for anybody who wants to get info from the web:
&lt;/p>
&lt;pre>
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \
URL [SELECTOR] [COMMANDS]
 mojo get /
 mojo get mojolicio.us
 mojo get -v -r google.com
 mojo get --method POST --content 'content' mojolicio.us
 mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us
 mojo get mojolicio.us 'head &amp;gt; title' text
 mojo get mojolicio.us .footer all
 mojo get mojolicio.us a attr href
 mojo get mojolicio.us '*' attr id
 mojo get mojolicio.us 'h1, h2, h3' 3 text

These options are available:
 --charset &amp;lt;charset&amp;gt; Charset of HTML5/XML content, defaults to auto
 detection or "UTF-8".
 --content &amp;lt;content&amp;gt; Content to send with request.
 --header &amp;lt;name:value&amp;gt; Additional HTTP header.
 --method &amp;lt;method&amp;gt; HTTP method to use, defaults to "GET".
 --redirect Follow up to 5 redirects.
 --verbose Print verbose debug information to STDERR.&lt;/pre
>
&lt;p>
 First, the name can be a bit awkward when you use it often. I tend to shorten
 it to 'mg':
&lt;/p></description></item><item><title>Easily integrating your Mojolicious app with Facebook.</title><link>https://marcus.means.no/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</link><pubDate>Sat, 08 Jan 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</guid><description>&lt;p>Facebook has recently released a&lt;a href="http://graph.facebook.com/"> new Graph API&lt;/a>. It's a simple RESTish API, and uses the newly released OAuth2 spec for authorization. This makes it a great match for &lt;a href="http://mojolicio.us">Mojolicious&lt;/a>, and using my new &lt;a href="https://github.com/marcusramberg/mojolicious-plugin-oauth2">OAuth2&lt;/a> plugin (Also coming to a CPAN mirror near you), it's absolutely trivial.&lt;/p>
&lt;p>Here is a simple Lite example. Just register an app with facebook to get the key and secret.&lt;/p>
&lt;pre>
 use Mojolicious::Lite;
 # configure the plugin
 plugin 'oauth2', facebook => {
 key => 'my-key',
 secret => 'my-secret' };

 get 'hello' => sub { 
 My $self=shift;
 #redirects the gets the token asynchronous 
 $self->get_token('facebook', callback => sub {
 my $token=shift;
 my $me=$self->client->get(
 'https://graph.facebook.com/me?access_token='.$token)->res->json;
 $self->render( text =>
 "Hello ".$me->{name} );
 });
&lt;/pre>
&lt;p>As you can see, the plugin handles the request flow automatically. We then use the built in JSON parsing in the Mojolicious Client to turn the API data into structures we can work with in our application.&lt;/p></description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>&lt;p>
 A few days ago I uploaded my first Mojolicious plugin to CPAN,&lt;a
 href="http://search.cpan.org/~mramberg/Mojolicious-Plugin-Proxy-0.2/"
 >
 Mojolicious::Plugin::Proxy&lt;/a
 >. My use case was that I am writing a simple single-file html5/javascript
 app, which needed to access a remote JSON feed. When running on a device with
 file:/// URLs, cross-site scripting is not an issue, but when running on a
 web-server, my app is unable to reach that remote JSON feed, so I wrote this
 plugin to allow me to simply proxy JSON requests from the local server to the
 remote one. This is how it works
&lt;/p></description></item><item><title>Moose-ish DBIC Schemas</title><link>https://marcus.means.no/post/2010-06-03-mooseish-dbic-schemas/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-06-03-mooseish-dbic-schemas/</guid><description>&lt;p>
 Longing for a more Moose-ish DBIx::Class? Eventually there will be
 MooseX::DBIC, but if you need something while you're waiting, you could check
 out MooseX::DBIC::AddColumn which lets you do Moose-like column definitions in
 your Result classes.
&lt;/p></description></item><item><title>Mojolicious GSOC blog</title><link>https://marcus.means.no/post/2010-06-02-mojolicious-gsoc-blog/</link><pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-06-02-mojolicious-gsoc-blog/</guid><description>&lt;p>
 I'm mentoring a Google Summer of Code project to improve the Mojolicious test
 suite this year, and my student has just set up a blog to journal his
 progress. Check it out, you might even learn something.
&lt;/p></description></item><item><title>DBIx-Class about to switch to git</title><link>https://marcus.means.no/post/2010-06-01-dbix-class-about-to-switch-to-git/</link><pubDate>Tue, 01 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-06-01-dbix-class-about-to-switch-to-git/</guid><description>&lt;blockquote>
 &lt;p>12:27 &amp;lt;ribasushi&amp;gt; a call to all git-heads&lt;/p>
 &lt;p>
 12:28 &amp;lt;ribasushi&amp;gt; recently haarg did a seemingly perfect conversion of
 dbic from svn to git (a non-trivial feat)
 &lt;/p>
 &lt;p>
 12:28 &amp;lt;ribasushi&amp;gt; I am calling for people who actually know git to
 randomly poke at the new history and notify me of whatever problems they see
 &lt;/p>
 &lt;p>
 12:28 &amp;lt;ribasushi&amp;gt;
 &lt;a href="http://github.com/haarg/DBIx-Class"
 >http://github.com/haarg/DBIx-Class&lt;/a
 >
 &lt;/p>
 &lt;p>
 12:29 &amp;lt;ribasushi&amp;gt; (also you can ascertain the quality of the
 conversion, and potentially draft haarg to do a catalyst conversion as well
 - it took him a couple of freaking hours to do dbic)
 &lt;/p></description></item><item><title>Last chance to submit a talk for NPW 2010</title><link>https://marcus.means.no/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</guid><description>&lt;p>
 Thinking about submitting a talk for NPW 2010 in Reykjavik? The deadline for
 the Call for Paper is tomorrow, 29th of march, so you'd better hurry up and
 get that submission in there. I've submitted a talk, and am really looking
 forward to visit iceland. I've never been, but from the
 &lt;a href="http://www.flickr.com/search/?s=int&amp;w=all&amp;q=iceland+nature&amp;m=text"
 >photos I've seen&lt;/a
 >
 it seems like a beautiful place.
&lt;/p></description></item><item><title>MojaMoja</title><link>https://marcus.means.no/post/2010-03-28-mojamoja/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-03-28-mojamoja/</guid><description>&lt;p>
 Yet another Perl MVC micro-framework with a name that will be confused with my
 &lt;a href="http://mojomojo.org/">wiki software&lt;/a>. From the Author's
 description:
&lt;/p>
&lt;p>
 &lt;em>(PoC)yet another sinatra-ish framework built on CPAN module.&lt;br /> &lt;/em>
&lt;/p>
&lt;p>
 Rather than 'shaggadelic' or 'dance', this one starts the app with 'zigorou'.
 I can't see it catching on.
&lt;/p></description></item><item><title>Slides from my Mojolicious presentation</title><link>https://marcus.means.no/post/2010-03-07-slides-from-my-mojolicious-presentation/</link><pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-03-07-slides-from-my-mojolicious-presentation/</guid><description>&lt;p>I recently held a introduction to the Mojolicious web framework for Oslo.pm. Here are the slides:&lt;/p>
&lt;div style="width:425px" id="__ss_3338291">&lt;strong style="display:block;margin:12px 0 4px">&lt;a href="http://www.slideshare.net/marcusramberg/mojolicious-3338291" title="Mojolicious">Mojolicious&lt;/a>&lt;/strong>&lt;object width="425" height="355">&lt;param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojolicious-key-100304142250-phpapp02&amp;stripped_title=mojolicious-3338291" />&lt;param name="allowFullScreen" value="true"/>&lt;param name="allowScriptAccess" value="always"/>&lt;embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojolicious-key-100304142250-phpapp02&amp;stripped_title=mojolicious-3338291" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355">&lt;/embed>&lt;/object>
&lt;div style="padding:5px 0 12px">View more &lt;a href="http://www.slideshare.net/">presentations&lt;/a> from &lt;a href="http://www.slideshare.net/marcusramberg">marcusramberg&lt;/a>.&lt;/div>
&lt;/div></description></item><item><title>cpanminus - The new CPAN superstar</title><link>https://marcus.means.no/post/2010-02-21-cpanminus-the-new-cpan-superstar/</link><pubDate>Sun, 21 Feb 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-02-21-cpanminus-the-new-cpan-superstar/</guid><description>&lt;p>
 Like most serious Perl people, CPAN is the main reason I still use Perl after
 all this time. This huge, wonderful library of Perl code usually helps me
 avoid reinventing any wheels. On the other hand, the standard CPAN client is
 one of my most regular hate objects when coding Perl.
&lt;/p>
&lt;p>
 It's not that it lacks any features I need, rather the opposite, the damn
 thing has a million options, and no good defaults. CPANPLUS is only adding to
 this mess with even more options. However, now there's a better
 solution.&amp;nbsp;
&lt;/p></description></item></channel></rss>