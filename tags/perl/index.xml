<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Perl on Suburban Nerd</title><link>https://marcus.nordaaker.com/tags/perl/</link><description>Recent content in Perl on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Code released under the Apache 2.0 license.</copyright><lastBuildDate>Wed, 24 Jun 2020 00:00:00 +0200</lastBuildDate><atom:link href="https://marcus.nordaaker.com/tags/perl/index.xml" rel="self" type="application/rss+xml"/><item><title>Perl 7 Announced</title><link>https://marcus.nordaaker.com/post/2020-06-24-perl-7-announced/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0200</pubDate><guid>https://marcus.nordaaker.com/post/2020-06-24-perl-7-announced/</guid><description>Not going to lie, This Perl 7 announcement is the best news I&amp;rsquo;ve heard in a while. My biggest outstanding question is if the are going to be enabling signatures in this release. I really hope so.
Regardless, you can be sure that the Mojo team is 100% behind pushing Perl forward, and I hope to see some exciting major Perl releases in the years to come. Cor and async/await in the core are high on my personal list.</description></item><item><title>Coturn for WebRTC NAT Traversal</title><link>https://marcus.nordaaker.com/post/coturn-for-webrtc-nat-traversal/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0200</pubDate><guid>https://marcus.nordaaker.com/post/coturn-for-webrtc-nat-traversal/</guid><description>This article will show you how to set up Coturn. This is a service that allows hosts behind NAT to communicate peer to peer with webrtc. STUN is helping to negotiate port/ip and TURN will proxy the actual traffic if all else fails.
We&amp;rsquo;re using this with Convos&amp;rsquo; video IRC feature, but the same applies to other WebRTC projects.
Installation I&amp;rsquo;ll be assuming you&amp;rsquo;re on Ubutunu for this tutorial, so users on other distros will have to adjust the setup for their environment.</description></item><item><title>Porting AnsibleModule to Perl.</title><link>https://marcus.nordaaker.com/post/2015-08-31-porting-ansiblemodule-to-perl/</link><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2015-08-31-porting-ansiblemodule-to-perl/</guid><description>“All animals are equal, but some animals are more equal than others.” ― George Orwell, Animal Farm Ansible is a great orchestration tool, which I&amp;rsquo;ve used extensively for the last years to build infrastructure, or even to accomplish routine tasks like restarting a group of web servers one by one or patching a bunch of servers for critical security issues.
Ansible is written in Python, but you can write modules in anything that can generate JSON.</description></item><item><title>Building Ansible Modules with Perl and Mojolicious</title><link>https://marcus.nordaaker.com/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</guid><description>While setting up Output, we decided to automate all our infrastructure using Ansible. This lets us easily do zero downtime releases and create new workers as needed to scale. We&amp;rsquo;ve got roles for haproxy, postgresql, nginx, our app servers and a lot more. One thing we&amp;rsquo;ve been handling manually so far is DNS. We&amp;rsquo;re happy Cloudflare users, and they have one of the best DNS admin tools I&amp;rsquo;ve used, but still I felt like we could do better.</description></item><item><title>Mojolicious::Plugin::RenderSteps</title><link>https://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</guid><description>This weekend I attended the MojoConf hackathon, which was great fun. I had some interesting talks with the rest of the core team, and I collaborated with Joel Berger on Mojo::PG, an adaptor for the Mojo::IOLoop for Postgres. Joel is almost done with a Pool implementation as well, and we&amp;rsquo;ll probably be on CPAN sometime this week.
I also wrote a simple plugin-helper, which I think greatly simplify working with async controllers in Mojolicious.</description></item><item><title>Perl needs modern garbage collection</title><link>https://marcus.nordaaker.com/post/2012-09-13-perl-needs-modern-garbage-collection/</link><pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-09-13-perl-needs-modern-garbage-collection/</guid><description>Chromatic just wrote a list of important features that Perl 5 needs. While I agree with most of the listed ones (and in fact contributed to the new p5-mop proposal during the recent Hackathon), I found one feature curiously missing.
I mean, JWZ pointed this out in 1998; Perl garbage collection is a bad joke. That was 14 years ago, and the situation is the same. It is trivial to create a circular reference and trip it up.</description></item><item><title>Moving to Moose Hackathon 2012</title><link>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</guid><description>This week, my excellent Perl Mongers group Oslo.pm, led by the excellent Salve, has arranged an event we called the Moving to Moose Hackathon 2012. The purpose of this event was to promote the adoption of a MOP (Meta Object Protocol) in Perl development. To this effect, we had two groups, the Perl RDF community, looking to adopt moose in their modules, and Stevan Little and his merry gang of p5-mop developers, looking to create a proposal for a MOP in the Perl core itself, to replace the venerable blessed hash object model.</description></item><item><title>Debugging LWP with mitmproxy</title><link>https://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</guid><description>Are you using an LWP app, and trying to debug it? My personal preferences is using mitmproxy.
To get LWP to use mitmproxy, set the following ENV variables:
PERL_LWP_ENV_PROXY=1 HTTPS_PROXY='http://localhost:8080/' ./script/myapp
Note, this also works for apps using Mojo::UserAgent, except you don't need the first ENV variable.</description></item><item><title>A Mojolicious 2011.</title><link>https://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</link><pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</guid><description>A new year is upon us, and I figured this would be good time to take a look at the improvements in the Mojolicious framework in the last year. There has been a dazzling number of releases, 122 in fact, including the current release, 2.42.
Some of the releases were mere bugfix releases, with nothing noteworthy to add, but I&amp;#8217;ll try going through the major releases in the last year. When this year started, we already had a robust MVC Web framework, and through the year you will note that a lot of the work has gone into building a first class real time web framework.</description></item><item><title>Visualization of the Mojo class tree.</title><link>https://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>In this visualization, I've tried to group the various Mojo classes by function and color code them. The classes are placed in layers, and related groups are close to each other. Note that I've dropped abstract base classes and Mojolicious related subclasses from this visualization, as well as some servers and all the commands. This might be useful as a quick reference, if you want to print it, you can get the PDF here.</description></item><item><title>$ mojo get is X-ray for the web</title><link>https://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>Mojolicious isn't just useful for perl coders, it also includes a command line tool that can be quite handy for anybody who wants to get info from the web:
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \ URL [SELECTOR] [COMMANDS] mojo get / mojo get mojolicio.us mojo get -v -r google.com mojo get --method POST --content 'trololo' mojolicio.us mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us mojo get mojolicio.us 'head &amp;gt; title' text mojo get mojolicio.</description></item><item><title>Easily integrating your Mojolicious app with Facebook.</title><link>https://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</link><pubDate>Sat, 08 Jan 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</guid><description>Facebook has recently released anew Graph API. It's a simple RESTish API, and uses the newly released OAuth2 spec for authorization. This makes it a great match for Mojolicious, and using my new OAuth2 plugin (Also coming to a CPAN mirror near you), it's absolutely trivial.
Here is a simple Lite example. Just register an app with facebook to get the key and secret.
use Mojolicious::Lite; # configure the plugin plugin 'oauth2', facebook = { key = 'my-key', secret = 'my-secret' }; get 'hello' = sub { My $self=shift; #redirects the gets the token asynchronous $self-get_token('facebook', callback = sub { my $token=shift; my $me=$self-client-get( 'https://graph.</description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>https://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>A few days ago I uploaded my first Mojolicious plugin to CPAN,Mojolicious::Plugin::Proxy. My use case was that I am writing a simple single-file html5/javascript app, which needed to access a remote JSON feed. When running on a device with file:/// URLs, cross-site scripting is not an issue, but when running on a web-server, my appis unable to reach that remote JSON feed, so I wrote this plugin to allow me to simply proxy JSON requests from the local server to the remote one.</description></item><item><title>Mooseish DBIC Schemas</title><link>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</guid><description>Longing for a more Mooseish DBIx::Class? Eventually there will be MooseX::DBIC, but if you need something while you're waiting, you could check out MooseX::DBIC::AddColumn which lets you do Moose-like column definitions in your Result classes.</description></item><item><title>Mojolicious GSOC blog</title><link>https://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</link><pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</guid><description>I'm mentoring a Google Summer of Code project to improve the Mojolicious test suite this year, and my student has just set up a blog to journal his progress. Check it out, you might even learn something.</description></item><item><title>DBIx-Class about to switch to git</title><link>https://marcus.nordaaker.com/post/2010-06-01-dbix-class-about-to-switch-to-git/</link><pubDate>Tue, 01 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-01-dbix-class-about-to-switch-to-git/</guid><description>12:27 &amp;lt;ribasushi&amp;gt; a call to all git-heads
12:28 &amp;lt;ribasushi&amp;gt; recently haarg did a seemingly perfect conversion of dbic from svn to git (a non-trivial feat)
12:28 &amp;lt;ribasushi&amp;gt; I am calling for people who actually know git to randomly poke at the new history and notufy me of whatever problems they see
12:28 &amp;lt;ribasushi&amp;gt; http://github.com/haarg/DBIx-Class
12:29 &amp;lt;ribasushi&amp;gt; (also you can ascertain the quality of the conversion, and potentially draft haarg to do a catalyst conversion as well - it took him a couple of freaking hours to do dbic)</description></item><item><title>Last chance to submit a talk for NPW 2010</title><link>https://marcus.nordaaker.com/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</guid><description>Thinking about submitting a talk for NPW 2010 in Reykjavik? The deadline for the Call for Paper is tomorrow, 29th of march, so you'd better hurry up and get that submission in there. I've submitted a talk, and am really looking forward to visit iceland. I've never been, but from the photos I've seen it seems like a beautyful place.</description></item><item><title>MojaMoja</title><link>https://marcus.nordaaker.com/post/2010-03-28-mojamoja/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-28-mojamoja/</guid><description>Yet another Perl MVC micro-framework with a name that will be confused with my wiki software. From the Author's description:
(PoC)yet another sinatra-ish framework built on CPAN module.
Rather than 'shaggadelic' or 'dance', this one starts the app with 'zigorou'. I can't see it catching on.</description></item><item><title>Slides from my Mojolicious presentation</title><link>https://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</link><pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</guid><description>I recently held a introduction to the Mojolicious web framework for Oslo.pm. Here are the slides:
Mojolicious View more presentations from marcusramberg.</description></item><item><title>cpanminus - The new CPAN superstar</title><link>https://marcus.nordaaker.com/post/2010-02-21-cpanminus-the-new-cpan-superstar/</link><pubDate>Sun, 21 Feb 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-02-21-cpanminus-the-new-cpan-superstar/</guid><description>Like most serious Perl people, CPAN is the main reason I still use Perl after all this time. This huge, wonderful library of Perl code usually helps me avoid reinventing any wheels. On the other hand, the standard CPAN client is one of my most regular hate objects when coding Perl.
It's not that it lacks any features I need, rather the opposite, the damn thing has a million options, and no good defaults.</description></item></channel></rss>