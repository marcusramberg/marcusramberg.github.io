<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Perl on Suburban Nerd</title><link>https://marcus.nordaaker.com/tags/perl/</link><description>Recent content in Perl on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Code released under the Apache 2.0 license.</copyright><lastBuildDate>Mon, 31 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://marcus.nordaaker.com/tags/perl/index.xml" rel="self" type="application/rss+xml"/><item><title>Porting AnsibleModule to Perl.</title><link>https://marcus.nordaaker.com/post/2015-08-31-porting-ansiblemodule-to-perl/</link><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2015-08-31-porting-ansiblemodule-to-perl/</guid><description>“All animals are equal, but some animals are more equal than others.” ― George Orwell, Animal Farm Ansible is a great orchestration tool, which I&amp;rsquo;ve used extensively for the last years to build infrastructure, or even to accomplish routine tasks like restarting a group of web servers one by one or patching a bunch of servers for critical security issues.
Ansible is written in Python, but you can write modules in anything that can generate JSON.</description></item><item><title>Building Ansible Modules with Perl and Mojolicious</title><link>https://marcus.nordaaker.com/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2014-10-05-building-ansible-modules-with-perl-and-mojolicious/</guid><description>While setting up Output, we decided to automate all our infrastructure using Ansible. This lets us easily do zero downtime releases and create new workers as needed to scale. We&amp;rsquo;ve got roles for haproxy, postgresql, nginx, our app servers and a lot more. One thing we&amp;rsquo;ve been handling manually so far is DNS. We&amp;rsquo;re happy Cloudflare users, and they have one of the best DNS admin tools I&amp;rsquo;ve used, but still I felt like we could do better.</description></item><item><title>Mojolicious::Plugin::RenderSteps</title><link>https://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</guid><description>This weekend I attended the MojoConf hackathon, which was great fun. I had some interesting talks with the rest of the core team, and I collaborated with Joel Berger on Mojo::PG, an adaptor for the Mojo::IOLoop for Postgres. Joel is almost done with a Pool implementation as well, and we&amp;rsquo;ll probably be on CPAN sometime this week.
I also wrote a simple plugin-helper, which I think greatly simplify working with async controllers in Mojolicious.</description></item><item><title>Perl needs modern garbage collection</title><link>https://marcus.nordaaker.com/post/2012-09-13-perl-needs-modern-garbage-collection/</link><pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-09-13-perl-needs-modern-garbage-collection/</guid><description>Chromatic just wrote a list of important features that Perl 5 needs. While I agree with most of the listed ones (and in fact contributed to the new p5-mop proposal during the recent Hackathon), I found one feature curiously missing.
I mean, JWZ pointed this out in 1998; Perl garbage collection is a bad joke. That was 14 years ago, and the situation is the same. It is trivial to create a circular reference and trip it up.</description></item><item><title>Moving to Moose Hackathon 2012</title><link>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</guid><description>This week, my excellent Perl Mongers group Oslo.pm, led by the excellent Salve, has arranged an event we called the Moving to Moose Hackathon 2012. The purpose of this event was to promote the adoption of a MOP (Meta Object Protocol) in Perl development. To this effect, we had two groups, the Perl RDF community, looking to adopt moose in their modules, and Stevan Little and his merry gang of p5-mop developers, looking to create a proposal for a MOP in the Perl core itself, to replace the venerable blessed hash object model.</description></item><item><title>Debugging LWP with mitmproxy</title><link>https://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</guid><description>Are you using an LWP app, and trying to debug it? My personal preferences is using mitmproxy.
To get LWP to use mitmproxy, set the following ENV variables:
PERL_LWP_ENV_PROXY=1 HTTPS_PROXY='http://localhost:8080/' ./script/myapp
Note, this also works for apps using Mojo::UserAgent, except you don't need the first ENV variable.</description></item><item><title>A Mojolicious 2011.</title><link>https://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</link><pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</guid><description>A new year is upon us, and I figured this would be good time to take a look at the improvements in the Mojolicious framework in the last year. There has been a dazzling number of releases, 122 in fact, including the current release, 2.42.
Some of the releases were mere bugfix releases, with nothing noteworthy to add, but I&amp;#8217;ll try going through the major releases in the last year. When this year started, we already had a robust MVC Web framework, and through the year you will note that a lot of the work has gone into building a first class real time web framework.</description></item><item><title>Visualization of the Mojo class tree.</title><link>https://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>In this visualization, I've tried to group the various Mojo classes by function and color code them. The classes are placed in layers, and related groups are close to each other. Note that I've dropped abstract base classes and Mojolicious related subclasses from this visualization, as well as some servers and all the commands. This might be useful as a quick reference, if you want to print it, you can get the PDF here.</description></item><item><title>$ mojo get is X-ray for the web</title><link>https://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>Mojolicious isn't just useful for perl coders, it also includes a command line tool that can be quite handy for anybody who wants to get info from the web:
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \ URL [SELECTOR] [COMMANDS] mojo get / mojo get mojolicio.us mojo get -v -r google.com mojo get --method POST --content 'trololo' mojolicio.us mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us mojo get mojolicio.us 'head &amp;gt; title' text mojo get mojolicio.</description></item><item><title>Easily integrating your Mojolicious app with Facebook.</title><link>https://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</link><pubDate>Sat, 08 Jan 2011 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</guid><description>Facebook has recently released anew Graph API. It's a simple RESTish API, and uses the newly released OAuth2 spec for authorization. This makes it a great match for Mojolicious, and using my new OAuth2 plugin (Also coming to a CPAN mirror near you), it's absolutely trivial.
Here is a simple Lite example. Just register an app with facebook to get the key and secret.
use Mojolicious::Lite; # configure the plugin plugin 'oauth2', facebook = { key = 'my-key', secret = 'my-secret' }; get 'hello' = sub { My $self=shift; #redirects the gets the token asynchronous $self-get_token('facebook', callback = sub { my $token=shift; my $me=$self-client-get( 'https://graph.</description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>https://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>A few days ago I uploaded my first Mojolicious plugin to CPAN,Mojolicious::Plugin::Proxy. My use case was that I am writing a simple single-file html5/javascript app, which needed to access a remote JSON feed. When running on a device with file:/// URLs, cross-site scripting is not an issue, but when running on a web-server, my appis unable to reach that remote JSON feed, so I wrote this plugin to allow me to simply proxy JSON requests from the local server to the remote one.</description></item><item><title>Mooseish DBIC Schemas</title><link>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</guid><description>Longing for a more Mooseish DBIx::Class? Eventually there will be MooseX::DBIC, but if you need something while you're waiting, you could check out MooseX::DBIC::AddColumn which lets you do Moose-like column definitions in your Result classes.</description></item><item><title>Mojolicious GSOC blog</title><link>https://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</link><pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</guid><description>I'm mentoring a Google Summer of Code project to improve the Mojolicious test suite this year, and my student has just set up a blog to journal his progress. Check it out, you might even learn something.</description></item><item><title>DBIx-Class about to switch to git</title><link>https://marcus.nordaaker.com/post/2010-06-01-dbix-class-about-to-switch-to-git/</link><pubDate>Tue, 01 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-01-dbix-class-about-to-switch-to-git/</guid><description>12:27 &amp;lt;ribasushi&amp;gt; a call to all git-heads
12:28 &amp;lt;ribasushi&amp;gt; recently haarg did a seemingly perfect conversion of dbic from svn to git (a non-trivial feat)
12:28 &amp;lt;ribasushi&amp;gt; I am calling for people who actually know git to randomly poke at the new history and notufy me of whatever problems they see
12:28 &amp;lt;ribasushi&amp;gt; http://github.com/haarg/DBIx-Class
12:29 &amp;lt;ribasushi&amp;gt; (also you can ascertain the quality of the conversion, and potentially draft haarg to do a catalyst conversion as well - it took him a couple of freaking hours to do dbic)</description></item><item><title>Last chance to submit a talk for NPW 2010</title><link>https://marcus.nordaaker.com/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-28-last-chance-to-submit-a-talk-for-npw-2010/</guid><description>Thinking about submitting a talk for NPW 2010 in Reykjavik? The deadline for the Call for Paper is tomorrow, 29th of march, so you'd better hurry up and get that submission in there. I've submitted a talk, and am really looking forward to visit iceland. I've never been, but from the photos I've seen it seems like a beautyful place.</description></item><item><title>MojaMoja</title><link>https://marcus.nordaaker.com/post/2010-03-28-mojamoja/</link><pubDate>Sun, 28 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-28-mojamoja/</guid><description>Yet another Perl MVC micro-framework with a name that will be confused with my wiki software. From the Author's description:
(PoC)yet another sinatra-ish framework built on CPAN module.
Rather than 'shaggadelic' or 'dance', this one starts the app with 'zigorou'. I can't see it catching on.</description></item><item><title>Slides from my Mojolicious presentation</title><link>https://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</link><pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</guid><description>I recently held a introduction to the Mojolicious web framework for Oslo.pm. Here are the slides:
Mojolicious View more presentations from marcusramberg.</description></item><item><title>cpanminus - The new CPAN superstar</title><link>https://marcus.nordaaker.com/post/2010-02-21-cpanminus-the-new-cpan-superstar/</link><pubDate>Sun, 21 Feb 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-02-21-cpanminus-the-new-cpan-superstar/</guid><description>Like most serious Perl people, CPAN is the main reason I still use Perl after all this time. This huge, wonderful library of Perl code usually helps me avoid reinventing any wheels. On the other hand, the standard CPAN client is one of my most regular hate objects when coding Perl.
It's not that it lacks any features I need, rather the opposite, the damn thing has a million options, and no good defaults.</description></item><item><title>Burning the candle at both ends.</title><link>https://marcus.nordaaker.com/post/2009-11-28-burning-the-candle-at-both-ends/</link><pubDate>Sat, 28 Nov 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-11-28-burning-the-candle-at-both-ends/</guid><description>In addition to recent fatherhood and doing my own startup, I am now the leader of the Oslo Perl Mongers. Look forward to tech talks from Oslo.pm in the months to come. :)</description></item><item><title>Testing JavaScript from Perl</title><link>https://marcus.nordaaker.com/post/2009-11-06-testing-javascript-from-perl/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-11-06-testing-javascript-from-perl/</guid><description>If you want to write tests for your JavaScript code from Perl, Claes' module Test::JavaScript::More comes in handy. This module works by evaling everything from the use line as JavaScript. Of course, now you're mixing two languages in one file, which is not going to make any of your syntax validators happy. However, loading it like this will please both perl and jslint:
m| /* |; # Comment out JavaScript use Test::JavaScript::More; __END__ = ''; // It's is all JS from here.</description></item><item><title>Creating QR barcodes with perl.</title><link>https://marcus.nordaaker.com/post/2009-10-08-creating-qr-barcodes-with-perl/</link><pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-10-08-creating-qr-barcodes-with-perl/</guid><description>A really simple tutorial for creating these 2d-barcodes that you see android use all the time.</description></item><item><title>Introducing ... Me</title><link>https://marcus.nordaaker.com/post/2009-09-29-introducing-me/</link><pubDate>Tue, 29 Sep 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-09-29-introducing-me/</guid><description>Hey there, the internet is a turbulent place, and since I&amp;#8217;ve moved around quite
a few times, I think I forgot to introduce myself the last time I made the
move. I am Marcus Ramberg, the writer of this blog, and director of
Nordaaker, a small British/Norwegian company currently run out of Oslo,
Norway. In addition to being my personal blog, at the time being this blog
acts as Nordaaker&amp;#8217;s dynamic english presence.</description></item><item><title>Catalyst cares about your old code</title><link>https://marcus.nordaaker.com/post/2009-09-04-catalyst-cares-about-your-old-code/</link><pubDate>Fri, 04 Sep 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-09-04-catalyst-cares-about-your-old-code/</guid><description>09:52 wow.. you can actually see how old that code is 10:00 but it still runs without a single modification. nice! 10:00 catalyst++ 10:14 rafl: try that with rails :) 10:14 no, thanks Code rot is everywhere, but some platforms suffer more than others. Even Simple C++ code suffers from code rot.</description></item><item><title>Catalyst::Plugin::AutoCRUD</title><link>https://marcus.nordaaker.com/post/2009-09-02-catalystpluginautocrud/</link><pubDate>Wed, 02 Sep 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-09-02-catalystpluginautocrud/</guid><description>One major factor in Catalyst's success has been extensibility. I plan to
do a series on extensions that I've found useful recently. To kick it off,
I'll feature a model which gives me a simple and useful admin interface to
my DBIx::Class models.
When I first got involved with MVC Web Frameworks like Maypole and Ruby on
Rails, a big selling point was the ability to generate CRUD (Create/Read/
Update/Delete) interfaces to your data model.</description></item><item><title>Sebastian on MS IIS' FastCGI support.</title><link>https://marcus.nordaaker.com/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</link><pubDate>Tue, 11 Aug 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</guid><description> 09:30 there is absolutely no way to detect the server base as far as i can see 09:33 you really have to do horrible things with PATH_TRANSLATED... 09:34 seriously... was that thing developed by a bunch of monkeys? 10:00 yeah, they were trying to write shakespeare's collected works, and ended up with IIS instead</description></item><item><title>Model adaptors for Catalyst.</title><link>https://marcus.nordaaker.com/post/2009-08-07-model-adaptors-for-catalyst/</link><pubDate>Fri, 07 Aug 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-08-07-model-adaptors-for-catalyst/</guid><description>In a recent post Dave Rolsky points out some of his own best practices for Catalyst. While I've come around to agree with his first point, that Catalyst should generate a reusable config class for the user, I'm not so sure with regards to his model viewpoints.
For me, the strength of Catalyst's Model layer has always been the immense glue layer that allows me to configure any model in a predictable way.</description></item><item><title>Bootylicious - Single file Mojo based blog</title><link>https://marcus.nordaaker.com/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</link><pubDate>Thu, 06 Aug 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</guid><description>As you might know, Sebastian recently added single-file support to his Mojolicious framework. Viacheslav Tikhanovskii has taken this functionality and run with it, producing bootylicious - a ~280 SLOC web log system. It sorts a directory of POD formatted blog posts, and even supports RSS. I think these single file apps is an excellent way to demonstrate your framework. I actually remember this as being a selling point for Maypole back in the days :)</description></item><item><title>Initial Impressions of Catalyst Book | A Foolish Manifesto</title><link>https://marcus.nordaaker.com/post/2009-07-24-initial-impressions-of-catalyst-book-a-foolish-manifesto/</link><pubDate>Fri, 24 Jul 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-07-24-initial-impressions-of-catalyst-book-a-foolish-manifesto/</guid><description>Frew Schmidt has read the first four chapter of the new Catalyst book and gives some first impressions:
So far though, I would say that the book is better than most programming books. Really, a lot of programming books need to be more like this, instead of focusing entirely on the arcana of one framework they should help you be a better programmer overall.</description></item><item><title>Screencast: Introduction to Catalyst by Dan Dascalescu</title><link>https://marcus.nordaaker.com/post/2009-06-20-screencast-introduction-to-catalyst-by-dan-dascalescu/</link><pubDate>Sat, 20 Jun 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-06-20-screencast-introduction-to-catalyst-by-dan-dascalescu/</guid><description>Suck on that, RoR :-)</description></item><item><title>Quick textmate tip for Perlers</title><link>https://marcus.nordaaker.com/post/2009-06-09-quick-textmate-tip-for-perlers/</link><pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-06-09-quick-textmate-tip-for-perlers/</guid><description>Using Textmate for Perl programming? As you probably know, the Perl bundle supports validating your perl syntax with a quick shortcut. However, I picked up a quick tip from the "Javascript Tools" bundle. If you rebind the command as ⌘-S, TextMate will automatically check your syntax every time you save a Perl file. In case you need help doing this:
In the menu Go to Bundles - Bundle Editor - Show Bundle Editor</description></item><item><title>Using Cruise Control with Perl projects</title><link>https://marcus.nordaaker.com/post/2009-06-03-using-cruise-control-with-perl-projects/</link><pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-06-03-using-cruise-control-with-perl-projects/</guid><description>I often</description></item><item><title>I love lazy web / Catalyst dispatcher graphs</title><link>https://marcus.nordaaker.com/post/2009-05-31-i-love-lazy-web-catalyst-dispatcher-graphs/</link><pubDate>Sun, 31 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-31-i-love-lazy-web-catalyst-dispatcher-graphs/</guid><description>So, it seems that people are actually reading my ramblings. For instance, Franck Cuny read my description of the Mojo routes graph generator. Then he took it upon himself to write the Catalyst equivalent. That is just so awesome! Frank says "For the moment only private actions are graphed.", hopefully, it can be extended to understand chained actions. I can't wait to test it out on the iusethis code base. Now I can just hand this graph to Arne when he wants to know which template matches which action.</description></item><item><title>Awesome route graph with MojoX::Routes::AsGraph</title><link>https://marcus.nordaaker.com/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</link><pubDate>Wed, 27 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</guid><description>We are testing out Sebastian's Mojolicious framework for use in a Nordaaker project. Mojolicious uses an routes-based dispatcher, which is nice, but sometimes it's hard to keep track of how everything is routed. Luckily Melo already has an excellent solution for this:
Just check out MojoX::Routes::AsGraph , which can generate these lovely graphs for you. It can even generate Ascii graphs, if you're a hard-core console user (Thanks to vti for telling me about that, as well as showing me this module in the first place :).</description></item><item><title>Fixing the POD synopsis in OSX</title><link>https://marcus.nordaaker.com/post/2009-05-18-fixing-the-pod-synopsis-in-osx/</link><pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-18-fixing-the-pod-synopsis-in-osx/</guid><description>Having problems copying example code from POD and getting invalid characters in your Perl? Apparently this is a problem with nroff on OS X (According to my linux hacking peeps), but the solution is quite simple. Just stuff this in your .profile or whatever ;)
alias perldoc='perldoc -t'
And your pod is rendered in glorious pure-text, without using weird characters for ' and -.</description></item><item><title>Gitorious now powered by norwegian company</title><link>https://marcus.nordaaker.com/post/2009-05-12-gitorious-now-powered-by-norwegian-company/</link><pubDate>Tue, 12 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-12-gitorious-now-powered-by-norwegian-company/</guid><description>Even though we're currently using github for all our git hosting needs, we do like the open source alternative gitorious. It makes us happy that it's now officially supported by some of our favorite rubyists from Oslo.
Gitorious now is a project maintained by Shortcut AS, which I co-founded. Shortcut AS now officially supports and develops Gitorious in cooperation with contributors outside Shortcut. Gitorious is, and will continue to be, 100% free software, licensed under the Affero GPL.</description></item><item><title>MooseX multi method dispatch is second to none.</title><link>https://marcus.nordaaker.com/post/2009-05-05-moosex-multi-method-dispatch-is-second-to-none/</link><pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-05-moosex-multi-method-dispatch-is-second-to-none/</guid><description>You might have an awesome OO system if:
you are able to implement Rock-Paper-Scissors-Lizard-Spock using nothing but multi methods (via nothingmuch).</description></item><item><title>The Iron Man talk from Nordic Perl Workshop</title><link>https://marcus.nordaaker.com/post/2009-05-05-the-blogging-man-talk-from-nordic-perl-workshop/</link><pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-05-05-the-blogging-man-talk-from-nordic-perl-workshop/</guid><description>The NUUG Video group has finished the first video from the latest Nordic Perl Workshop, and sjn++ has put it online on the Oslo.pm blip.tv channel. It is Matt S Trout's Iron Man announcement from the lightning talks. Watch it in awe, then go Sign up for the program.</description></item><item><title>Pictures from Nordic Perl Workshop</title><link>https://marcus.nordaaker.com/post/2009-04-26-pictures-from-nordic-perl-workshop/</link><pubDate>Sun, 26 Apr 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-04-26-pictures-from-nordic-perl-workshop/</guid><description>Larry in sunset by Marcus Ramberg
Last week, we arranged Nordic Perl Workshop in Oslo. I've uploaded some pictures from the conference and the hackathon that was arranged at LinPro the weekend after. I've tagged all my photos with npw2009.</description></item><item><title>We Are Iron Man</title><link>https://marcus.nordaaker.com/post/2009-04-22-we-are-iron-man/</link><pubDate>Wed, 22 Apr 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-04-22-we-are-iron-man/</guid><description>Went to visit the Oslo rubyists today just to get the old worn out 'But we heard perl is dead', as a welcome. So worn out. Somehow they acknowledge that python is a nice language tho. So why has nobody heard from us in a while? Matt has a theory.
But here's my point: Perl people hang out on mailing lists. We bottom post, carefully interleaved, with 76 character lines. We have signatures that meet the McQ standard for acceptable size.</description></item><item><title>Dream job?</title><link>https://marcus.nordaaker.com/post/2009-04-15-dream-job/</link><pubDate>Wed, 15 Apr 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-04-15-dream-job/</guid><description>Apparently Catalyst and DBIx::Class powers one of the biggest porn sites in the world, YouPorn:
We operate one of the most visited Catalyst/DBIx::Class sites in the world with 90 million users and hundreds of millions of pageviews per day. They are looking for contractors all over the world. No matter what you might think of the content, the stack they are using seems cool, pretty much the same libraries we use to power iusethis and our other sites.</description></item><item><title>Nordaaker's Services</title><link>https://marcus.nordaaker.com/post/2009-04-07-nordaakers-services/</link><pubDate>Tue, 07 Apr 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-04-07-nordaakers-services/</guid><description>In addition to our own web applications, Nordaaker provides various consulting services, mostly related to web development and Perl/Catalyst. We have just added a page describing those services to our home page. If you are interested in using our services, please send me an email. We are based in Oslo, Norway, but willing to travel/telecommute.</description></item><item><title>Easy debugging of your Catalyst app</title><link>https://marcus.nordaaker.com/post/2009-04-01-easy-debugging-of-your-catalyst-app/</link><pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-04-01-easy-debugging-of-your-catalyst-app/</guid><description>BigDiver shows us how to easily set up Komodo's remote debugging to work with Catalyst. If you don't like Komodo, you could also check out Leon's Devel::ebug, which actually has a Catalyst-based frontend.</description></item><item><title>Better documentation for complex classes</title><link>https://marcus.nordaaker.com/post/2009-03-31-1692/</link><pubDate>Tue, 31 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-31-1692/</guid><description>Jess Robinson writes:
Having been annoyed enough by this sort of POD wrangling already, theorbtwo came up with Pod::Inherit to help the module writers improve their documentation. Run it with the name of a class or the lib directory for your distribution, every class is investigated to determine which methods it contains, the inheritance tree is then searched to determine which base class actually defines that method. I think this is pretty awesome.</description></item><item><title>MojoMojo now in FreeBSD ports.</title><link>https://marcus.nordaaker.com/post/2009-03-30-mojomojo-now-in-freebsd-ports/</link><pubDate>Mon, 30 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-30-mojomojo-now-in-freebsd-ports/</guid><description>After MojoMojo, the CMSish Wiki software that powers dev.catalyst.perl.org was featured prominently in the CPANTS Heavy 100, there was some concern about how much time was required to install it. However, thanks to the illustrious dane Lars Balker Rasmussen, FreeBSD guys now have it easy. He's fought through our entire dependency list, and uploaded p5-MojoMojo to the FreeBSD ports tree. Hopefully Debian packages won't be far behind. (In the interest of full disclosure, I am the founder of the MojoMojo project.</description></item><item><title>A proper TryCatch for Perl</title><link>https://marcus.nordaaker.com/post/2009-03-25-a-proper-trycatch-for-perl/</link><pubDate>Wed, 25 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-25-a-proper-trycatch-for-perl/</guid><description>While grown-up languages like Java has mechanisms to let you throw Exception objects, and to catch them in different places and do interesting things with them, most Perl code just dies with a error message of some sort (If you're lucky, it's even helpful, and reporting the mistake you did inside your own code, rather than going belly up inside the module itself. This is usually good enough for most people.</description></item><item><title>7 principles for transforming difficult tasks into simple ones</title><link>https://marcus.nordaaker.com/post/2009-03-17-7-principles-for-transforming-difficult-tasks-into-simple-ones/</link><pubDate>Tue, 17 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-17-7-principles-for-transforming-difficult-tasks-into-simple-ones/</guid><description>Here's another one of the talks from Nordic Perl Workshop 2006 that we're uploading as a promotion of Nordic Perl Workshop 2009. The conference is being held in Oslo again this year, April 16-17. I personally loved this talk by Michael Schwern, and it's not one that gets dated easily, so enjoy.</description></item><item><title>Some positive Catalyst-feedback</title><link>https://marcus.nordaaker.com/post/2009-03-06-some-positive-catalyst-feedback/</link><pubDate>Fri, 06 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-06-some-positive-catalyst-feedback/</guid><description>Chintana Wilamuna has recently tried out Catalyst for the Perl StockTrader client:
This time however, I had slightly more time available so I started from Catalyst::Manual::Tutorial and boy, the docs are amazingly well written. Kennedy Clark has done a wonderful job with the documentation.
Well deserved praise for Kennedy's work on the documentation. I think many people who tried out Catalyst in it's infancy don't realize how far the documentation has come since then.</description></item><item><title>More reasons to love Twirc</title><link>https://marcus.nordaaker.com/post/2009-02-24-more-reasons-to-love-twirc/</link><pubDate>Tue, 24 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-24-more-reasons-to-love-twirc/</guid><description>15:18 Wives and girlfriends around the world rejoice at Safari 4's Top Sites feature. #privatebrowsingtotherescue 15:20 favorite mattgemmell 15:20 Which tweet? 15:20 [1] Wives and girlfriends around the world rejoice at Safari ... 15:20 [2] @mattfarrugia Which podcast? 15:20 [3] @Zyote They were just in-case-of-no-beans backups, and I ... 15:20 1 15:20 -tweeter:&amp;twitter- favorite added For those who missed my previous post about Twirc, you can get it through CPAN or Github.</description></item><item><title>Painless rollouts with FCGI::Engine</title><link>https://marcus.nordaaker.com/post/2009-02-24-painless-rollouts-with-fcgiengine/</link><pubDate>Tue, 24 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-24-painless-rollouts-with-fcgiengine/</guid><description>Our software site i use this is built on the MVC Framework Catalyst. We currently run it using the Russian web server Nginx and standalone fastcgi servers. I am using the Moose based CGI::Engine distribution by Stevan Little to start the servers. This module makes it really easy to manage your applications. You just create a YML config file like this:
--- - name: "iusethis-osx.server" nproc: 4 scriptname: "/www/iusethis-osx/script/iusethis_fastcgi.pl" pidfile: "</description></item><item><title>Perl.org dns broken</title><link>https://marcus.nordaaker.com/post/2009-02-21-perlorg-dns-broken/</link><pubDate>Sat, 21 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-21-perlorg-dns-broken/</guid><description>Looks like DirectI/resellerclub (the domain registrar) decided to suspend perl.org! I've no idea why. They're not a communicative bunch. Also, nice touch doing it on a Saturday. For now, if you need access to search.cpan.org, you can reach it directly by ip: http://207.115.101.144/ Also, note that you can access the catalyst framework home page through http://www.catalystframework.org/. You can read more about it from Ask's blog.
*update* perl.org is back, serenity has been restored to the world.</description></item><item><title>New-wave Perl</title><link>https://marcus.nordaaker.com/post/2009-02-17-new-wave-perl/</link><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-17-new-wave-perl/</guid><description>I was positively surprised by the response of the perl community. It wasn’t the typical “our programs run fast” (to ruby fanboys*) or “space as syntax wtf?” (to python fanboys). Instead it seemed that community took notice of the criticisms and made pretty clear that waiting for Perl 6 was not an option. Today, Perl 6 is doing fine (you can write code in Perl 6) and so is Perl 5.</description></item><item><title>Latest OSX Security upgrade can break your Perl</title><link>https://marcus.nordaaker.com/post/2009-02-16-latest-osx-security-upgrade-can-break-your-perl/</link><pubDate>Mon, 16 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-16-latest-osx-security-upgrade-can-break-your-perl/</guid><description>Apple has shipped a somewhat untested security update, it seems. After installing it, my Catalyst apps stopped working in development. Trying to reinstall some modules through the CPAN shell brought further misery. Luckily, Miyagawa had already posted a solution to the CPAN problem. In addition, it seems they have installed a broken Scalar::Utils, so after following his advice and installing IO manually to get a unbroken CPAN shell, I suggest running</description></item><item><title>Install modules via the CPAN shell from github</title><link>https://marcus.nordaaker.com/post/2009-02-15-install-modules-via-the-cpan-shell-from-github/</link><pubDate>Sun, 15 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-15-install-modules-via-the-cpan-shell-from-github/</guid><description>Nice hack by Miyagawa. I'd prefer if Perl continued to have a distributed delivery mechanism tho :-)</description></item><item><title>Perl community not generating any internal buzz?</title><link>https://marcus.nordaaker.com/post/2009-02-15-perl-community-not-generating-any-internal-buzz/</link><pubDate>Sun, 15 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-15-perl-community-not-generating-any-internal-buzz/</guid><description>Chromatic points to a trend in the Perl community of not giving any link love to our own. Somehow, it feels like I've heard this before. I agree this is a negative trend, but I find it amusing that it comes from chromatic, the only posters I can remember him linking to in his journal is people spreading FUD about Perl, in is mission to refute their statements. Somehow it seems to me like linking to these people and giving them attention is only making them stronger.</description></item><item><title>Javascript Uri object</title><link>https://marcus.nordaaker.com/post/2009-02-14-javascript-uri-object/</link><pubDate>Sat, 14 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-14-javascript-uri-object/</guid><description>Need to deal with Uris in a structured way in your client side code? This project is inspired by the Perl URI class, which is the defacto way of manipulating Resource Identifiers in Perl.</description></item><item><title>Paradox of choice or just lack of good defaults?</title><link>https://marcus.nordaaker.com/post/2009-02-14-paradox-of-choice-or-just-lack-of-good-defaults-/</link><pubDate>Sat, 14 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-14-paradox-of-choice-or-just-lack-of-good-defaults-/</guid><description>So, a basic philosophy that Catalyst adopted from Perl itself is the famous There is more than one way to do it. Dan points out the fallacy of having to make too many choices when adopting a new framework. I disagree that that is a deciding factor in Rails or django having more web applications listed on appliedstack than Catalyst. I believe the extreme Rails hyping and number of books coming out to be a critical Rails success factor, and Google choosing Django as it's only language for App Engine to be a critical Django one.</description></item><item><title>MojoMojo is the heaviest app on CPAN :)</title><link>https://marcus.nordaaker.com/post/2009-02-11-mojomojo-is-the-heaviest-app-on-cpan/</link><pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-11-mojomojo-is-the-heaviest-app-on-cpan/</guid><description>Adam Kennedy has released the Heaviest modules on CPAN list, showing that MojoMojo is currently the application with the biggest dependency graph on CPAN. This proves that we are firm opponents of the "Not Invented Here"-syndrome. :) I've volunteered lbr to do the FreeBSD packages, anyone interested in packaging it for debian? Feel free to contact me.</description></item><item><title>Definitively interesting</title><link>https://marcus.nordaaker.com/post/2009-02-08-definitively-interesting/</link><pubDate>Sun, 08 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-08-definitively-interesting/</guid><description>Seems Matt and Kieren has got something interesting going on. Now we really need to get Catalyst 5.8 out there :-)</description></item><item><title>Jesse Vincent talks about Request Tracker at NPW</title><link>https://marcus.nordaaker.com/post/2009-02-08-jesse-vincent-talks-about-request-tracker-at-npw/</link><pubDate>Sun, 08 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-08-jesse-vincent-talks-about-request-tracker-at-npw/</guid><description>(this video is from a weekly series that we are uploading from Nordic Perl Workshop 2006 to promote the upcoming Nordic Perl Workshop 2009)
I've used Request Tracker for many years. It's a terrific tool for keeping track of customer requests. With the latest versions, it even looks good.</description></item><item><title>Moose slides from Frozen Perl</title><link>https://marcus.nordaaker.com/post/2009-02-07-moose-slides-from-frozen-perl/</link><pubDate>Sat, 07 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-07-moose-slides-from-frozen-perl/</guid><description>The Frozen Perl conference is going on in Minneapolis this weekend. For those of us who missed it, I think these slides by Shawn M. Moore are worth checking out. A good introduction to Moose, and the best Method Modifier examples I've seen.</description></item><item><title>Happy to see that Perl is getting some love from the mac crowd</title><link>https://marcus.nordaaker.com/post/2009-02-05-happy-to-see-that-perl-is-getting-some-love-from-the-mac-crowd/</link><pubDate>Thu, 05 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-05-happy-to-see-that-perl-is-getting-some-love-from-the-mac-crowd/</guid><description>Seen in my twitter feed:
22:35 @mjtsai Heh - I had high hopes for python, but ... 22:35 perl -e "" 0.00s user 22:35 ruby -e "" 0.01s user 22:35 python -c "" 0.08s user 22:40 @danielpunkass Infinitely slower than Perl! In case you were wondering, Daniel and Michael were discussing this post from @gruber.</description></item><item><title>Moose docs get a serious overhaul</title><link>https://marcus.nordaaker.com/post/2009-02-04-moose-docs-get-a-serious-overhaul/</link><pubDate>Wed, 04 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-04-moose-docs-get-a-serious-overhaul/</guid><description>Thanks to the Perl Foundation, who sponsored Dave Rolsky's work to write a Moose manual. There is now no good excuse for not knowing what the Moose offers :) Check it out at search.cpan.org</description></item><item><title>Benchmarking Perl by Gisle Aas</title><link>https://marcus.nordaaker.com/post/2009-02-02-benchmarking-perl-by-gisle-aas/</link><pubDate>Mon, 02 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-02-benchmarking-perl-by-gisle-aas/</guid><description>From Nordic Perl Workshop 2006. Check out more videos at the Oslo.pm channel</description></item><item><title>Tweeting from irssi with twirc</title><link>https://marcus.nordaaker.com/post/2009-02-02-tweeting-from-irssi/</link><pubDate>Mon, 02 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-02-tweeting-from-irssi/</guid><description>When I started out with twitter, I used the native OSX client Twitterrific. It's a pretty nice piece of software, but I couldn't get comfortable with it popping up every time there was a new tweet, as it was a bit too disturbing, and if I turned it off, I forgot to check it out at all.
However, lately, I have a much better solution. I already communicate fairly frequently through the venerable Internet Relay Chat protocol (or IRC as most people know it).</description></item><item><title>Accessing your Catalyst config from scripts</title><link>https://marcus.nordaaker.com/post/2009-02-01-catalyst_config_from_scripts/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-01-catalyst_config_from_scripts/</guid><description>Often, I need to write command line scripts that access my apps' data models. With Catalyst, one way to do this is to to load the actual application, like
use iusethis; Then I can access my models like iusethis-&amp;gt;model('DBIC::Person') . However, all I really need is to get the application configuration, and loading a big application is a lot of overhead. Just using Config::Any isn't a good solution tho, since it does not handle _local files properly, among other thing.</description></item><item><title>Daily perl onliner on twitter</title><link>https://marcus.nordaaker.com/post/2009-01-31-daily-perl-onliner-on-twitter/</link><pubDate>Sat, 31 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-01-31-daily-perl-onliner-on-twitter/</guid><description>Get a useful perl one-liner every day in your tweets.</description></item><item><title>Cleaning up after FastCGI</title><link>https://marcus.nordaaker.com/post/2009-01-30-cleaning-up-after-fastcgi/</link><pubDate>Fri, 30 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-01-30-cleaning-up-after-fastcgi/</guid><description>If you have any apps running under FastCGI, you know the error logs it outputs are quite messy. Hobbs shows a nice technique for cleaning up this mess.</description></item><item><title>Creating a standalone Damon with Moose and friends</title><link>https://marcus.nordaaker.com/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</link><pubDate>Fri, 30 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</guid><description>I recently needed to create a persistent daemon to do some maintenance tasks for iusethis. Turns out that building these with the postmodern object system Moose is really easy.
For those of you not in the know, Moose has the concept of 'Roles', stolen from the Perl 6 project. Roles work kind of like a mix-in that you can add to your class to make it super powerful :) (For the extra curious, you can read more details about Roles in Perl6 here).</description></item><item><title>Lisp programmer declaring Perl to be a "beautiful, wonderfully designed language"</title><link>https://marcus.nordaaker.com/post/2009-01-29-lisp-programmer-declaring-perl-to-be-a-beautyful-wonderfully-designed-language/</link><pubDate>Thu, 29 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-01-29-lisp-programmer-declaring-perl-to-be-a-beautyful-wonderfully-designed-language/</guid><description>I did not see that one coming.</description></item></channel></rss>