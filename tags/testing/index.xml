<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on marcus</title><link>https://marcus.means.no/tags/testing/</link><description>Recent content in Testing on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Tue, 02 Apr 2024 04:27:33 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous Delivery with Drone and Dokku</title><link>https://marcus.means.no/post/2014-05-10-continous-delivery-with-drone-and-dokku/</link><pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2014-05-10-continous-delivery-with-drone-and-dokku/</guid><description>&lt;p>A part of my job as CTO of &lt;a href="http://theoutput.co/">Output&lt;/a> is managing our
deployment and production systems. To this end, I&amp;rsquo;ve spent a lot of time
working with virtualization, Docker and automation recently. I&amp;rsquo;ll try to share
some of our experiences here in the months to come. One of our biggest
challenges has been to get a good testing culture internally. To that end, I
wanted a solid solution for CI.&lt;/p>
&lt;p>This seems like a solved problem. Just fire up Jenkins, and you&amp;rsquo;re done.
However, there are always complications. Hard to install dependencies, Selenium
tests, required infrastructure services. That is why I have grown to love
&lt;a href="http://github.com/drone/drone">Drone&lt;/a>. Run your test suite in a clean docker
image every time, cache your dependencies (just like Heroku does), and run a
deploy action of your choice if the test succeed. Drone also supports various
notification mechanisms, including Email (of course), IM and our favorite
Slack.&lt;/p></description></item><item><title>Testing JavaScript from Perl</title><link>https://marcus.means.no/post/2009-11-06-testing-javascript-from-perl/</link><pubDate>Fri, 06 Nov 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-11-06-testing-javascript-from-perl/</guid><description>&lt;p>
 If you want to write tests for your JavaScript code from Perl, Claes' module
 &lt;a
 href="http://search.cpan.org/~claesjac/JavaScript-1.12/lib/Test/JavaScript/More.pm"
 >Test::JavaScript::More&lt;/a
 >
 comes in handy. This module works by eval-ing everything from the use line as
 JavaScript. Of course, now you're mixing two languages in one file, which is
 not going to make any of your syntax validators happy. However, loading it
 like this will please both perl and jslint:
&lt;/p>
&lt;pre>
m| /* |; # Comment out JavaScript
use Test::JavaScript::More;
__END__ = ''; // It's is all JS from here. */
ok(1,'Success!');
&lt;/pre>
&lt;p>
 One final note. I had some problems building the cpan module of JavaScript on
 OSX with SpiderMonkey from ports. If you have the same problem, get the
 &lt;a href="http://github.com/claesjac/javascript"
 >latest and greatest version&lt;/a
 >
 from GitHub, which fixes this issue.
&lt;/p></description></item></channel></rss>