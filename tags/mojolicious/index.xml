<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mojolicious on Suburban Nerd</title><link>http://marcus.nordaaker.com/tags/mojolicious/</link><description>Recent content in Mojolicious on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Code released under the Apache 2.0 license.</copyright><lastBuildDate>Tue, 27 May 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://marcus.nordaaker.com/tags/mojolicious/index.xml" rel="self" type="application/rss+xml"/><item><title>Mojolicious::Plugin::RenderSteps</title><link>http://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2014-05-27-mojoliciouspluginrendersteps/</guid><description>This weekend I attended the MojoConf hackathon, which was great fun. I had some interesting talks with the rest of the core team, and I collaborated with Joel Berger on Mojo::PG, an adaptor for the Mojo::IOLoop for Postgres. Joel is almost done with a Pool implementation as well, and we&amp;rsquo;ll probably be on CPAN sometime this week.
I also wrote a simple plugin-helper, which I think greatly simplify working with async controllers in Mojolicious.</description></item><item><title>A Mojolicious 2011.</title><link>http://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</link><pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-12-31-a-mojolicious-2011/</guid><description>A new year is upon us, and I figured this would be good time to take a look at the improvements in the Mojolicious framework in the last year. There has been a dazzling number of releases, 122 in fact, including the current release, 2.42.
Some of the releases were mere bugfix releases, with nothing noteworthy to add, but I&amp;#8217;ll try going through the major releases in the last year. When this year started, we already had a robust MVC Web framework, and through the year you will note that a lot of the work has gone into building a first class real time web framework.</description></item><item><title>Visualization of the Mojo class tree.</title><link>http://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>In this visualization, I've tried to group the various Mojo classes by function and color code them. The classes are placed in layers, and related groups are close to each other. Note that I've dropped abstract base classes and Mojolicious related subclasses from this visualization, as well as some servers and all the commands. This might be useful as a quick reference, if you want to print it, you can get the PDF here.</description></item><item><title>Easily integrating your Mojolicious app with Facebook.</title><link>http://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</link><pubDate>Sat, 08 Jan 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</guid><description>Facebook has recently released anew Graph API. It's a simple RESTish API, and uses the newly released OAuth2 spec for authorization. This makes it a great match for Mojolicious, and using my new OAuth2 plugin (Also coming to a CPAN mirror near you), it's absolutely trivial.
Here is a simple Lite example. Just register an app with facebook to get the key and secret.
use Mojolicious::Lite; # configure the plugin plugin 'oauth2', facebook = { key = 'my-key', secret = 'my-secret' }; get 'hello' = sub { My $self=shift; #redirects the gets the token asynchronous $self-get_token('facebook', callback = sub { my $token=shift; my $me=$self-client-get( 'https://graph.</description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>http://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>A few days ago I uploaded my first Mojolicious plugin to CPAN,Mojolicious::Plugin::Proxy. My use case was that I am writing a simple single-file html5/javascript app, which needed to access a remote JSON feed. When running on a device with file:/// URLs, cross-site scripting is not an issue, but when running on a web-server, my appis unable to reach that remote JSON feed, so I wrote this plugin to allow me to simply proxy JSON requests from the local server to the remote one.</description></item><item><title>Mojolicious GSOC blog</title><link>http://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</link><pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2010-06-02-mojolicious-gsoc-blog/</guid><description>I'm mentoring a Google Summer of Code project to improve the Mojolicious test suite this year, and my student has just set up a blog to journal his progress. Check it out, you might even learn something.</description></item><item><title>Slides from my Mojolicious presentation</title><link>http://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</link><pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2010-03-07-slides-from-my-mojolicious-presentation/</guid><description>I recently held a introduction to the Mojolicious web framework for Oslo.pm. Here are the slides:
Mojolicious View more presentations from marcusramberg.</description></item></channel></rss>