<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mojolicious on marcus</title><link>https://marcus.means.no/tags/mojolicious/</link><description>Recent content in Mojolicious on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Mon, 28 Jul 2025 14:37:49 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/mojolicious/index.xml" rel="self" type="application/rss+xml"/><item><title>Mojolicious::Plugin::RenderSteps</title><link>https://marcus.means.no/post/2014-05-27-mojoliciouspluginrendersteps/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2014-05-27-mojoliciouspluginrendersteps/</guid><description>&lt;p>This weekend I attended the &lt;a href="http://mojoconf.org/">MojoConf&lt;/a> hackathon, which was great fun. I had
some interesting talks with the rest of the core team, and I collaborated with
Joel Berger on &lt;a href="http://github.com/marcusramberg/mojo-pg">Mojo::PG&lt;/a>, an adaptor for the Mojo::IOLoop for Postgres.
Joel is almost done with a Pool implementation as well, and we&amp;rsquo;ll probably be
on CPAN sometime this week.&lt;/p>
&lt;p>I also wrote a simple plugin-helper, which I think greatly simplify working
with async controllers in Mojolicious. This what you have to do to setup async
actions in mojolicious at the moment:&lt;/p></description></item><item><title>A Mojolicious 2011.</title><link>https://marcus.means.no/post/2011-12-31-a-mojolicious-2011/</link><pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-12-31-a-mojolicious-2011/</guid><description>&lt;p>
 &lt;em
 >A new year is upon us, and I figured this would be good time to take a look
 at the improvements in the Mojolicious framework in the last year. There has
 been a dazzling number of releases, 122 in fact, including the current
 release, 2.42&lt;/em
 >.
&lt;/p>
&lt;p>
 Some of the releases were mere bugfix releases, with nothing noteworthy to
 add, but I&amp;#8217;ll try going through the major releases in the last year.
 When this year started, we already had a robust MVC Web framework, and through
 the year you will note that a lot of the work has gone into building a first
 class real time web framework. 2010 ended with 1.0, codename Snow Flake,
 released 26th of december 2010. 1.01 fixed a couple of bugs, and added TLS
 Authentication.
&lt;/p></description></item><item><title>Visualization of the Mojo class tree.</title><link>https://marcus.means.no/post/2011-12-04-visualization-of-the-mojo-class-tree/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-12-04-visualization-of-the-mojo-class-tree/</guid><description>&lt;p>
 &lt;a
 href="http://marcus.nordaaker.com/wp-content/uploads/2011/12/Mojolicious-Classes1.jpg"
 >&lt;img
 src="http://marcus.nordaaker.com/wp-content/uploads/2011/12/Mojolicious-Classes1.jpg"
 alt=""
 title="Mojolicious Classes"
 width="806"
 height="546"
 class="alignleft size-full wp-image-3620"
 />&lt;/a>
&lt;/p>
&lt;p>
 In this visualization, I've tried to group the various Mojo classes by
 function and color code them. The classes are placed in layers, and related
 groups are close to each other. Note that I've dropped abstract base classes
 and Mojolicious related subclasses from this visualization, as well as some
 servers and all the commands.
&lt;/p>
&lt;p>
 This might be useful as a quick reference, if you want to print it, you can
 get the PDF
 &lt;a
 href="https://github.com/marcusramberg/mojo-classes/blob/master/Mojolicious%20Classes.pdf?raw=true"
 >here&lt;/a
 >.
&lt;/p></description></item><item><title>$ mojo get is X-ray for the web</title><link>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>&lt;p>
 Mojolicious isn't just useful for perl coders, it also includes a command line
 tool that can be quite handy for anybody who wants to get info from the web:
&lt;/p>
&lt;pre>
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \
URL [SELECTOR] [COMMANDS]
 mojo get /
 mojo get mojolicio.us
 mojo get -v -r google.com
 mojo get --method POST --content 'content' mojolicio.us
 mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us
 mojo get mojolicio.us 'head &amp;gt; title' text
 mojo get mojolicio.us .footer all
 mojo get mojolicio.us a attr href
 mojo get mojolicio.us '*' attr id
 mojo get mojolicio.us 'h1, h2, h3' 3 text

These options are available:
 --charset &amp;lt;charset&amp;gt; Charset of HTML5/XML content, defaults to auto
 detection or "UTF-8".
 --content &amp;lt;content&amp;gt; Content to send with request.
 --header &amp;lt;name:value&amp;gt; Additional HTTP header.
 --method &amp;lt;method&amp;gt; HTTP method to use, defaults to "GET".
 --redirect Follow up to 5 redirects.
 --verbose Print verbose debug information to STDERR.&lt;/pre
>
&lt;p>
 First, the name can be a bit awkward when you use it often. I tend to shorten
 it to 'mg':
&lt;/p></description></item><item><title>Easily integrating your Mojolicious app with Facebook.</title><link>https://marcus.means.no/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</link><pubDate>Sat, 08 Jan 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-01-08-easily-integrating-your-mojolicious-app-with-facebook/</guid><description>&lt;p>Facebook has recently released a&lt;a href="http://graph.facebook.com/"> new Graph API&lt;/a>. It's a simple RESTish API, and uses the newly released OAuth2 spec for authorization. This makes it a great match for &lt;a href="http://mojolicio.us">Mojolicious&lt;/a>, and using my new &lt;a href="https://github.com/marcusramberg/mojolicious-plugin-oauth2">OAuth2&lt;/a> plugin (Also coming to a CPAN mirror near you), it's absolutely trivial.&lt;/p>
&lt;p>Here is a simple Lite example. Just register an app with facebook to get the key and secret.&lt;/p>
&lt;pre>
 use Mojolicious::Lite;
 # configure the plugin
 plugin 'oauth2', facebook => {
 key => 'my-key',
 secret => 'my-secret' };

 get 'hello' => sub { 
 My $self=shift;
 #redirects the gets the token asynchronous 
 $self->get_token('facebook', callback => sub {
 my $token=shift;
 my $me=$self->client->get(
 'https://graph.facebook.com/me?access_token='.$token)->res->json;
 $self->render( text =>
 "Hello ".$me->{name} );
 });
&lt;/pre>
&lt;p>As you can see, the plugin handles the request flow automatically. We then use the built in JSON parsing in the Mojolicious Client to turn the API data into structures we can work with in our application.&lt;/p></description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>&lt;p>
 A few days ago I uploaded my first Mojolicious plugin to CPAN,&lt;a
 href="http://search.cpan.org/~mramberg/Mojolicious-Plugin-Proxy-0.2/"
 >
 Mojolicious::Plugin::Proxy&lt;/a
 >. My use case was that I am writing a simple single-file html5/javascript
 app, which needed to access a remote JSON feed. When running on a device with
 file:/// URLs, cross-site scripting is not an issue, but when running on a
 web-server, my app is unable to reach that remote JSON feed, so I wrote this
 plugin to allow me to simply proxy JSON requests from the local server to the
 remote one. This is how it works
&lt;/p></description></item><item><title>Mojolicious GSOC blog</title><link>https://marcus.means.no/post/2010-06-02-mojolicious-gsoc-blog/</link><pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-06-02-mojolicious-gsoc-blog/</guid><description>&lt;p>
 I'm mentoring a Google Summer of Code project to improve the Mojolicious test
 suite this year, and my student has just set up a blog to journal his
 progress. Check it out, you might even learn something.
&lt;/p></description></item><item><title>Slides from my Mojolicious presentation</title><link>https://marcus.means.no/post/2010-03-07-slides-from-my-mojolicious-presentation/</link><pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-03-07-slides-from-my-mojolicious-presentation/</guid><description>&lt;p>I recently held a introduction to the Mojolicious web framework for Oslo.pm. Here are the slides:&lt;/p>
&lt;div style="width:425px" id="__ss_3338291">&lt;strong style="display:block;margin:12px 0 4px">&lt;a href="http://www.slideshare.net/marcusramberg/mojolicious-3338291" title="Mojolicious">Mojolicious&lt;/a>&lt;/strong>&lt;object width="425" height="355">&lt;param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojolicious-key-100304142250-phpapp02&amp;stripped_title=mojolicious-3338291" />&lt;param name="allowFullScreen" value="true"/>&lt;param name="allowScriptAccess" value="always"/>&lt;embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mojolicious-key-100304142250-phpapp02&amp;stripped_title=mojolicious-3338291" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355">&lt;/embed>&lt;/object>
&lt;div style="padding:5px 0 12px">View more &lt;a href="http://www.slideshare.net/">presentations&lt;/a> from &lt;a href="http://www.slideshare.net/marcusramberg">marcusramberg&lt;/a>.&lt;/div>
&lt;/div></description></item><item><title>Sebastian on MS IIS' FastCGI support.</title><link>https://marcus.means.no/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</link><pubDate>Tue, 11 Aug 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-08-11-sebastian-on-ms-iis-fastcgi-support/</guid><description>&lt;pre>
09:30 &lt; @sri_> there is absolutely no way to detect the server base as far 
 as i can see
09:33 &lt; @sri_> you really have to do horrible things with PATH_TRANSLATED...
09:34 &lt; @sri_> seriously... was that thing developed by a bunch of monkeys?
10:00 &lt; marcus> yeah, they were trying to write shakespeare's collected works, 
 and ended up with IIS instead
&lt;/pre></description></item><item><title>Bootylicious - Single file Mojo based blog</title><link>https://marcus.means.no/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</link><pubDate>Thu, 06 Aug 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-08-06-bootylicious-single-file-mojo-based-blog/</guid><description>&lt;p>
 As you might know, Sebastian recently
 &lt;a href="http://labs.kraih.com/blog/2009/07/perl-is-awesome.html"
 >added single-file support to his Mojolicious framework&lt;/a
 >. VTI has taken this functionality and run with it, producing bootylicious -
 a ~280 SLOC web log system. It sorts a directory of POD formatted blog posts,
 and even supports RSS. I think these single file apps is an excellent way to
 demonstrate your framework. I actually remember this as being a selling point
 for Maypole back in the days :)
&lt;/p></description></item><item><title>Awesome route graph with MojoX::Routes::AsGraph</title><link>https://marcus.means.no/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</link><pubDate>Wed, 27 May 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-05-27-awesome-route-graph-with-mojoxroutesasgraph/</guid><description>&lt;p>We are testing out Sebastian's &lt;a href="http://mojolicious.org">Mojolicious&lt;/a> framework for use in a Nordaaker project. Mojolicious uses an routes-based dispatcher, which is nice, but sometimes it's hard to keep track of how everything is routed. Luckily &lt;a href="http://www.simplicidade.org/notes/">Melo&lt;/a> already has an excellent solution for this:&lt;/p>
&lt;div class="thumbnail">&lt;a href="http://skitch.com/marcus/bt4fg/routes.dot">&lt;img src="http://img.skitch.com/20090527-rk59hj6crbhd4e4cxurprmhche.preview.jpg" alt="routes.dot" />&lt;/a>&lt;/p>
&lt;p>Just check out &lt;a href="http://search.cpan.org/~melo/MojoX-Routes-AsGraph-0.04/lib/MojoX/Routes/AsGraph.pm">MojoX::Routes::AsGraph&lt;/a> , which can generate these lovely graphs for you. It can even generate Ascii graphs, if you're a hard-core console user (Thanks to &lt;a href="http://github.com/vti/">vti&lt;/a> for telling me about that, as well as showing me this module in the first place :).&lt;/p></description></item></channel></rss>