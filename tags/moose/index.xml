<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Moose on Suburban Nerd</title><link>https://marcus.nordaaker.com/tags/moose/</link><description>Recent content in Moose on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Code released under the Apache 2.0 license.</copyright><lastBuildDate>Sat, 01 Sep 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://marcus.nordaaker.com/tags/moose/index.xml" rel="self" type="application/rss+xml"/><item><title>Moving to Moose Hackathon 2012</title><link>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2012-09-01-moving-to-moose-hackathon-2013/</guid><description>This week, my excellent Perl Mongers group Oslo.pm, led by the excellent Salve, has arranged an event we called the Moving to Moose Hackathon 2012. The purpose of this event was to promote the adoption of a MOP (Meta Object Protocol) in Perl development. To this effect, we had two groups, the Perl RDF community, looking to adopt moose in their modules, and Stevan Little and his merry gang of p5-mop developers, looking to create a proposal for a MOP in the Perl core itself, to replace the venerable blessed hash object model.</description></item><item><title>Mooseish DBIC Schemas</title><link>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2010-06-03-mooseish-dbic-schemas/</guid><description>Longing for a more Mooseish DBIx::Class? Eventually there will be MooseX::DBIC, but if you need something while you're waiting, you could check out MooseX::DBIC::AddColumn which lets you do Moose-like column definitions in your Result classes.</description></item><item><title>A proper TryCatch for Perl</title><link>https://marcus.nordaaker.com/post/2009-03-25-a-proper-trycatch-for-perl/</link><pubDate>Wed, 25 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-03-25-a-proper-trycatch-for-perl/</guid><description>While grown-up languages like Java has mechanisms to let you throw Exception objects, and to catch them in different places and do interesting things with them, most Perl code just dies with a error message of some sort (If you're lucky, it's even helpful, and reporting the mistake you did inside your own code, rather than going belly up inside the module itself. This is usually good enough for most people.</description></item><item><title>Moose slides from Frozen Perl</title><link>https://marcus.nordaaker.com/post/2009-02-07-moose-slides-from-frozen-perl/</link><pubDate>Sat, 07 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-07-moose-slides-from-frozen-perl/</guid><description>The Frozen Perl conference is going on in Minneapolis this weekend. For those of us who missed it, I think these slides by Shawn M. Moore are worth checking out. A good introduction to Moose, and the best Method Modifier examples I've seen.</description></item><item><title>Moose docs get a serious overhaul</title><link>https://marcus.nordaaker.com/post/2009-02-04-moose-docs-get-a-serious-overhaul/</link><pubDate>Wed, 04 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-04-moose-docs-get-a-serious-overhaul/</guid><description>Thanks to the Perl Foundation, who sponsored Dave Rolsky's work to write a Moose manual. There is now no good excuse for not knowing what the Moose offers :) Check it out at search.cpan.org</description></item><item><title>Joose 2.0 released</title><link>https://marcus.nordaaker.com/post/2009-02-01-joose-20-released/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-02-01-joose-20-released/</guid><description>Joose, the javascript meta object system inspired by Moose recently released version 2.0 of their framework adding support for offical support for types/sub types as well as coercisons. There are also a bunch of other changes, read on at the original announcement. You can also check out the project homepage.</description></item><item><title>Creating a standalone Damon with Moose and friends</title><link>https://marcus.nordaaker.com/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</link><pubDate>Fri, 30 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.nordaaker.com/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</guid><description>I recently needed to create a persistent daemon to do some maintenance tasks for iusethis. Turns out that building these with the postmodern object system Moose is really easy.
For those of you not in the know, Moose has the concept of 'Roles', stolen from the Perl 6 project. Roles work kind of like a mix-in that you can add to your class to make it super powerful :) (For the extra curious, you can read more details about Roles in Perl6 here).</description></item></channel></rss>