<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Moose on marcus</title><link>https://marcus.means.no/tags/moose/</link><description>Recent content in Moose on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Mon, 28 Jul 2025 14:37:46 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/moose/index.xml" rel="self" type="application/rss+xml"/><item><title>Moving to Moose Hackathon 2012</title><link>https://marcus.means.no/post/2012-09-01-moving-to-moose-hackathon-2013/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2012-09-01-moving-to-moose-hackathon-2013/</guid><description>&lt;p>
 This week, my excellent Perl Mongers group Oslo.pm, led by the excellent
 &lt;a href="http://twitter.com/sjoshuan">Salve&lt;/a>,  has arranged an event we
 called the Moving to Moose Hackathon 2012. The purpose of this event was to
 promote the adoption of a MOP (Meta Object Protocol) in Perl development. To
 this effect, we had two groups, the Perl RDF community, looking to adopt moose
 in their modules, and
 &lt;a href="http://search.cpan.org/~stevan/">Stevan Little&lt;/a> and his merry gang
 of p5-mop developers, looking to create a proposal for a MOP in the Perl core
 itself, to replace the venerable blessed hash object model.
&lt;/p></description></item><item><title>Moose-ish DBIC Schemas</title><link>https://marcus.means.no/post/2010-06-03-mooseish-dbic-schemas/</link><pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-06-03-mooseish-dbic-schemas/</guid><description>&lt;p>
 Longing for a more Moose-ish DBIx::Class? Eventually there will be
 MooseX::DBIC, but if you need something while you're waiting, you could check
 out MooseX::DBIC::AddColumn which lets you do Moose-like column definitions in
 your Result classes.
&lt;/p></description></item><item><title>A proper TryCatch for Perl</title><link>https://marcus.means.no/post/2009-03-25-a-proper-trycatch-for-perl/</link><pubDate>Wed, 25 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-03-25-a-proper-trycatch-for-perl/</guid><description>&lt;p>
 While grown-up languages like Java has mechanisms to let you throw Exception
 objects, and to catch them in different places and do interesting things with
 them, most Perl code just dies with a error message of some sort (If you're
 lucky, it's even helpful, and reporting the mistake you did inside your own
 code, rather than going belly up inside the module itself.
&lt;/p>
&lt;p>
 This is usually good enough for most people. Using a block eval, you can catch
 the error and deal with it, even doing a regular expression against it to
 handle different errors. Still, some people have been writing CPAN modules to
 add this functionality to the language. Unfortunately, up until now these
 attempts has mostly fallen into two categories; 'kludge', and 'source filter
 powered'.
&lt;/p></description></item><item><title>Moose slides from Frozen Perl</title><link>https://marcus.means.no/post/2009-02-07-moose-slides-from-frozen-perl/</link><pubDate>Sat, 07 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-02-07-moose-slides-from-frozen-perl/</guid><description>&lt;p>The Frozen Perl conference is going on in Minneapolis this weekend. For those of us who missed it, I think these slides by &lt;a href="http://sartak.org/">Shawn M. Moore&lt;/a> are worth checking out. A good introduction to Moose, and the best Method Modifier examples I've seen.&lt;/p></description></item><item><title>Moose docs get a serious overhaul</title><link>https://marcus.means.no/post/2009-02-04-moose-docs-get-a-serious-overhaul/</link><pubDate>Wed, 04 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-02-04-moose-docs-get-a-serious-overhaul/</guid><description>&lt;p>Thanks to the Perl Foundation, who sponsored Dave Rolsky's work to write a Moose manual. There is now no good excuse for not knowing what the Moose offers :) Check it out at &lt;a href="http://search.cpan.org/~drolsky/Moose-0.66/lib/Moose/Manual.pod">search.cpan.org&lt;/a>&lt;/p></description></item><item><title>Joose 2.0 released</title><link>https://marcus.means.no/post/2009-02-01-joose-20-released/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-02-01-joose-20-released/</guid><description>&lt;p>
 Joose, the javascript meta object system inspired by
 &lt;a href="http://www.iinteractive.com/moose/">Moose &lt;/a>recently released
 version 2.0 of their framework adding support for  official support for
 types/sub types as well as coercion. There are also a bunch of other changes,
 read on at the original announcement. You can also check out the
 &lt;a href="http://code.google.com/p/joose-js/">project homepage&lt;/a>.
&lt;/p></description></item><item><title>Creating a standalone Damon with Moose and friends</title><link>https://marcus.means.no/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</link><pubDate>Fri, 30 Jan 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-01-30-creating-a-standalone-damon-with-moose-and-friends/</guid><description>&lt;p>
 I recently needed to create a persistent daemon to do some maintenance tasks
 for &lt;a href="http://osx.iusethis.com/">iusethis&lt;/a>. Turns out that building
 these with the postmodern object system
 &lt;a href="http://www.iinteractive.com/moose/">Moose&lt;/a> is  really easy.
&lt;/p>
&lt;p>
 For those of you not in the know, Moose has the concept of 'Roles', stolen
 from the Perl 6 project. Roles work kind of like a mix-in that you can add to
 your class to make it super powerful :)   (For the extra curious, you can read
 more details about Roles in Perl6
 &lt;a href="http://en.wikipedia.org/wiki/Perl_6#Roles">here&lt;/a>).
&lt;/p></description></item></channel></rss>