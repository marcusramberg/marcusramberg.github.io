<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Catalyst on Suburban Nerd</title><link>http://marcus.nordaaker.com/tags/catalyst/</link><description>Recent content in Catalyst on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Sep 2009 00:00:00 +0000</lastBuildDate><atom:link href="http://marcus.nordaaker.com/tags/catalyst/index.xml" rel="self" type="application/rss+xml"/><item><title>Catalyst cares about your old code</title><link>http://marcus.nordaaker.com/post/2009-09-04-catalyst-cares-about-your-old-code/</link><pubDate>Fri, 04 Sep 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-09-04-catalyst-cares-about-your-old-code/</guid><description>09:52 wow.. you can actually see how old that code is 10:00 but it still runs without a single modification. nice! 10:00 catalyst++ 10:14 rafl: try that with rails :) 10:14 no, thanks Code rot is everywhere, but some platforms suffer more than others. Even Simple C++ code suffers from code rot.</description></item><item><title>Catalyst::Plugin::AutoCRUD</title><link>http://marcus.nordaaker.com/post/2009-09-02-catalystpluginautocrud/</link><pubDate>Wed, 02 Sep 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-09-02-catalystpluginautocrud/</guid><description>One major factor in Catalyst's success has been extensibility. I plan to
do a series on extensions that I've found useful recently. To kick it off,
I'll feature a model which gives me a simple and useful admin interface to
my DBIx::Class models.
When I first got involved with MVC Web Frameworks like Maypole and Ruby on
Rails, a big selling point was the ability to generate CRUD (Create/Read/
Update/Delete) interfaces to your data model.</description></item><item><title>Model adaptors for Catalyst.</title><link>http://marcus.nordaaker.com/post/2009-08-07-model-adaptors-for-catalyst/</link><pubDate>Fri, 07 Aug 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-08-07-model-adaptors-for-catalyst/</guid><description>In a recent post Dave Rolsky points out some of his own best practices for Catalyst. While I've come around to agree with his first point, that Catalyst should generate a reusable config class for the user, I'm not so sure with regards to his model viewpoints.
For me, the strength of Catalyst's Model layer has always been the immense glue layer that allows me to configure any model in a predictable way.</description></item><item><title>Initial Impressions of Catalyst Book | A Foolish Manifesto</title><link>http://marcus.nordaaker.com/post/2009-07-24-initial-impressions-of-catalyst-book-a-foolish-manifesto/</link><pubDate>Fri, 24 Jul 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-07-24-initial-impressions-of-catalyst-book-a-foolish-manifesto/</guid><description>Frew Schmidt has read the first four chapter of the new Catalyst book and gives some first impressions:
So far though, I would say that the book is better than most programming books. Really, a lot of programming books need to be more like this, instead of focusing entirely on the arcana of one framework they should help you be a better programmer overall.</description></item><item><title>Screencast: Introduction to Catalyst by Dan Dascalescu</title><link>http://marcus.nordaaker.com/post/2009-06-20-screencast-introduction-to-catalyst-by-dan-dascalescu/</link><pubDate>Sat, 20 Jun 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-06-20-screencast-introduction-to-catalyst-by-dan-dascalescu/</guid><description>Suck on that, RoR :-)</description></item><item><title>Using Cruise Control with Perl projects</title><link>http://marcus.nordaaker.com/post/2009-06-03-using-cruise-control-with-perl-projects/</link><pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-06-03-using-cruise-control-with-perl-projects/</guid><description>I often</description></item><item><title>I love lazy web / Catalyst dispatcher graphs</title><link>http://marcus.nordaaker.com/post/2009-05-31-i-love-lazy-web-catalyst-dispatcher-graphs/</link><pubDate>Sun, 31 May 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-05-31-i-love-lazy-web-catalyst-dispatcher-graphs/</guid><description>So, it seems that people are actually reading my ramblings. For instance, Franck Cuny read my description of the Mojo routes graph generator. Then he took it upon himself to write the Catalyst equivalent. That is just so awesome! Frank says "For the moment only private actions are graphed.", hopefully, it can be extended to understand chained actions. I can't wait to test it out on the iusethis code base. Now I can just hand this graph to Arne when he wants to know which template matches which action.</description></item><item><title>Dream job?</title><link>http://marcus.nordaaker.com/post/2009-04-15-dream-job/</link><pubDate>Wed, 15 Apr 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-04-15-dream-job/</guid><description>Apparently Catalyst and DBIx::Class powers one of the biggest porn sites in the world, YouPorn:
We operate one of the most visited Catalyst/DBIx::Class sites in the world with 90 million users and hundreds of millions of pageviews per day. They are looking for contractors all over the world. No matter what you might think of the content, the stack they are using seems cool, pretty much the same libraries we use to power iusethis and our other sites.</description></item><item><title>Easy debugging of your Catalyst app</title><link>http://marcus.nordaaker.com/post/2009-04-01-easy-debugging-of-your-catalyst-app/</link><pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-04-01-easy-debugging-of-your-catalyst-app/</guid><description>BigDiver shows us how to easily set up Komodo's remote debugging to work with Catalyst. If you don't like Komodo, you could also check out Leon's Devel::ebug, which actually has a Catalyst-based frontend.</description></item><item><title>Some positive Catalyst-feedback</title><link>http://marcus.nordaaker.com/post/2009-03-06-some-positive-catalyst-feedback/</link><pubDate>Fri, 06 Mar 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-03-06-some-positive-catalyst-feedback/</guid><description>Chintana Wilamuna has recently tried out Catalyst for the Perl StockTrader client:
This time however, I had slightly more time available so I started from Catalyst::Manual::Tutorial and boy, the docs are amazingly well written. Kennedy Clark has done a wonderful job with the documentation.
Well deserved praise for Kennedy's work on the documentation. I think many people who tried out Catalyst in it's infancy don't realize how far the documentation has come since then.</description></item><item><title>Painless rollouts with FCGI::Engine</title><link>http://marcus.nordaaker.com/post/2009-02-24-painless-rollouts-with-fcgiengine/</link><pubDate>Tue, 24 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-24-painless-rollouts-with-fcgiengine/</guid><description>Our software site i use this is built on the MVC Framework Catalyst. We currently run it using the Russian web server Nginx and standalone fastcgi servers. I am using the Moose based CGI::Engine distribution by Stevan Little to start the servers. This module makes it really easy to manage your applications. You just create a YML config file like this:
--- - name: "iusethis-osx.server" nproc: 4 scriptname: "/www/iusethis-osx/script/iusethis_fastcgi.pl" pidfile: "</description></item><item><title>Latest OSX Security upgrade can break your Perl</title><link>http://marcus.nordaaker.com/post/2009-02-16-latest-osx-security-upgrade-can-break-your-perl/</link><pubDate>Mon, 16 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-16-latest-osx-security-upgrade-can-break-your-perl/</guid><description>Apple has shipped a somewhat untested security update, it seems. After installing it, my Catalyst apps stopped working in development. Trying to reinstall some modules through the CPAN shell brought further misery. Luckily, Miyagawa had already posted a solution to the CPAN problem. In addition, it seems they have installed a broken Scalar::Utils, so after following his advice and installing IO manually to get a unbroken CPAN shell, I suggest running</description></item><item><title>Automatic deployment with Catalyst and Git</title><link>http://marcus.nordaaker.com/post/2009-02-15-automatic-deployment-with-catalyst-and-git/</link><pubDate>Sun, 15 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-15-automatic-deployment-with-catalyst-and-git/</guid><description>Mike Nachbaur has written a description of how he deploys his Catalyst-based site to production using git and catalyst, while autoupdating dependencies and ensuring that his tests har run successfully. We currently deploy iusethis in a similar fashion, although a little bit more manually, and with a staging server to test larger rollouts.</description></item><item><title>Paradox of choice or just lack of good defaults?</title><link>http://marcus.nordaaker.com/post/2009-02-14-paradox-of-choice-or-just-lack-of-good-defaults-/</link><pubDate>Sat, 14 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-14-paradox-of-choice-or-just-lack-of-good-defaults-/</guid><description>So, a basic philosophy that Catalyst adopted from Perl itself is the famous There is more than one way to do it. Dan points out the fallacy of having to make too many choices when adopting a new framework. I disagree that that is a deciding factor in Rails or django having more web applications listed on appliedstack than Catalyst. I believe the extreme Rails hyping and number of books coming out to be a critical Rails success factor, and Google choosing Django as it's only language for App Engine to be a critical Django one.</description></item><item><title>MojoMojo is the heaviest app on CPAN :)</title><link>http://marcus.nordaaker.com/post/2009-02-11-mojomojo-is-the-heaviest-app-on-cpan/</link><pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-11-mojomojo-is-the-heaviest-app-on-cpan/</guid><description>Adam Kennedy has released the Heaviest modules on CPAN list, showing that MojoMojo is currently the application with the biggest dependency graph on CPAN. This proves that we are firm opponents of the "Not Invented Here"-syndrome. :) I've volunteered lbr to do the FreeBSD packages, anyone interested in packaging it for debian? Feel free to contact me.</description></item><item><title>Definitively interesting</title><link>http://marcus.nordaaker.com/post/2009-02-08-definitively-interesting/</link><pubDate>Sun, 08 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-08-definitively-interesting/</guid><description>Seems Matt and Kieren has got something interesting going on. Now we really need to get Catalyst 5.8 out there :-)</description></item><item><title>Accessing your Catalyst config from scripts</title><link>http://marcus.nordaaker.com/post/2009-02-01-catalyst_config_from_scripts/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2009-02-01-catalyst_config_from_scripts/</guid><description>Often, I need to write command line scripts that access my apps' data models. With Catalyst, one way to do this is to to load the actual application, like
use iusethis; Then I can access my models like iusethis-&amp;gt;model('DBIC::Person') . However, all I really need is to get the application configuration, and loading a big application is a lot of overhead. Just using Config::Any isn't a good solution tho, since it does not handle _local files properly, among other thing.</description></item></channel></rss>