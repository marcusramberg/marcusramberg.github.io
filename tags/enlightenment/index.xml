<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enlightenment on marcus</title><link>https://marcus.means.no/tags/enlightenment/</link><description>Recent content in Enlightenment on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Mon, 10 Mar 2025 15:30:42 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/enlightenment/index.xml" rel="self" type="application/rss+xml"/><item><title>A proper TryCatch for Perl</title><link>https://marcus.means.no/post/2009-03-25-a-proper-trycatch-for-perl/</link><pubDate>Wed, 25 Mar 2009 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2009-03-25-a-proper-trycatch-for-perl/</guid><description>&lt;p>
 While grown-up languages like Java has mechanisms to let you throw Exception
 objects, and to catch them in different places and do interesting things with
 them, most Perl code just dies with a error message of some sort (If you're
 lucky, it's even helpful, and reporting the mistake you did inside your own
 code, rather than going belly up inside the module itself.
&lt;/p>
&lt;p>
 This is usually good enough for most people. Using a block eval, you can catch
 the error and deal with it, even doing a regular expression against it to
 handle different errors. Still, some people have been writing CPAN modules to
 add this functionality to the language. Unfortunately, up until now these
 attempts has mostly fallen into two categories; 'kludge', and 'source filter
 powered'.
&lt;/p></description></item></channel></rss>