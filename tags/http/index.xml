<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>http on Suburban Nerd</title><link>http://marcus.nordaaker.com/tags/http/</link><description>Recent content in http on Suburban Nerd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://marcus.nordaaker.com/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>offline decentralized single sign-on in the browser</title><link>http://marcus.nordaaker.com/post/2015-01-15-desentralized-passwordless-browser-auth/</link><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2015-01-15-desentralized-passwordless-browser-auth/</guid><description>Recently, browsers have just begun to implement web cryptography. This means that browsers are now capable of the same kind of passwordless decentralized authentication schemes we&amp;rsquo;ve had server-side with ssh and tls asymmetric keys for decades.
I think this is super interesting. I wonder if users are going to be able to understand how to use it tho. I do want to try.</description></item><item><title>Debugging LWP with mitmproxy</title><link>http://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2012-07-12-debugging-lwp-with-mitmproxy/</guid><description>Are you using an LWP app, and trying to debug it? My personal preferences is using mitmproxy.
To get LWP to use mitmproxy, set the following ENV variables:
PERL_LWP_ENV_PROXY=1 HTTPS_PROXY='http://localhost:8080/' ./script/myapp
Note, this also works for apps using Mojo::UserAgent, except you don't need the first ENV variable.</description></item><item><title>$ mojo get is X-ray for the web</title><link>http://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>Mojolicious isn't just useful for perl coders, it also includes a command line tool that can be quite handy for anybody who wants to get info from the web:
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \ URL [SELECTOR] [COMMANDS] mojo get / mojo get mojolicio.us mojo get -v -r google.com mojo get --method POST --content 'trololo' mojolicio.us mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us mojo get mojolicio.us 'head &amp;gt; title' text mojo get mojolicio.</description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>http://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>http://marcus.nordaaker.com/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>A few days ago I uploaded my first Mojolicious plugin to CPAN,Mojolicious::Plugin::Proxy. My use case was that I am writing a simple single-file html5/javascript app, which needed to access a remote JSON feed. When running on a device with file:/// URLs, cross-site scripting is not an issue, but when running on a web-server, my appis unable to reach that remote JSON feed, so I wrote this plugin to allow me to simply proxy JSON requests from the local server to the remote one.</description></item></channel></rss>