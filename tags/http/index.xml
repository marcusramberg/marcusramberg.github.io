<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Http on marcus</title><link>https://marcus.means.no/tags/http/</link><description>Recent content in Http on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Mon, 20 May 2024 20:56:55 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>Haproxy-lua-jwt</title><link>https://marcus.means.no/post/2020-08-17-haproxy-lua-jwt-/</link><pubDate>Mon, 17 Aug 2020 23:55:02 +0200</pubDate><guid>https://marcus.means.no/post/2020-08-17-haproxy-lua-jwt-/</guid><description>&lt;p>JWT Validation implementation for HAProxy Lua host&lt;/p></description></item><item><title>httpstat - great curl visualization</title><link>https://marcus.means.no/post/2020-08-12-httpstat-great-curl-visualization/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0200</pubDate><guid>https://marcus.means.no/post/2020-08-12-httpstat-great-curl-visualization/</guid><description>&lt;p>Great little tool for seeing HTTP timing stats.&lt;/p>
&lt;img alt="httpstat screenshot" src="https://marcus.means.no/images/2024-01-02-httpstat.png" width=700/></description></item><item><title>http.cat</title><link>https://marcus.means.no/post/2020-07-16-http.cat/</link><pubDate>Thu, 16 Jul 2020 13:43:10 +0200</pubDate><guid>https://marcus.means.no/post/2020-07-16-http.cat/</guid><description>&lt;p>HTTP Status Codes as cat pictures. This is peak internet. Love it.&lt;/p></description></item><item><title>offline decentralized single sign-on in the browser</title><link>https://marcus.means.no/post/2015-01-15-desentralized-passwordless-browser-auth/</link><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2015-01-15-desentralized-passwordless-browser-auth/</guid><description>&lt;blockquote>
&lt;p>Recently, browsers have just begun to implement web cryptography. This means
that browsers are now capable of the same kind of password-less decentralized
authentication schemes we&amp;rsquo;ve had server-side with ssh and asymmetric keys
for decades.&lt;/p>&lt;/blockquote>
&lt;p>I think this is super interesting. I wonder if users are going to be able to
understand how to use it tho. I do want to try.&lt;/p></description></item><item><title>Debugging LWP with mitmproxy</title><link>https://marcus.means.no/post/2012-07-12-debugging-lwp-with-mitmproxy/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2012-07-12-debugging-lwp-with-mitmproxy/</guid><description>&lt;p>Are you using an LWP app, and trying to debug it? My personal preferences is using &lt;a href="http://mitmproxy.org">mitmproxy&lt;/a>.&lt;/p>
&lt;p>To get LWP to use mitmproxy, set the following ENV variables:&lt;/p>
&lt;p>PERL_LWP_ENV_PROXY=1 HTTPS_PROXY='http://localhost:8080/' ./script/myapp&lt;/p>
&lt;p>Note, this also works for apps using Mojo::UserAgent, except you don't need the first ENV variable.&lt;/p></description></item><item><title>$ mojo get is X-ray for the web</title><link>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2011-11-30-mojo-get-is-x-ray-for-the-web/</guid><description>&lt;p>
 Mojolicious isn't just useful for perl coders, it also includes a command line
 tool that can be quite handy for anybody who wants to get info from the web:
&lt;/p>
&lt;pre>
usage: /Users/marcus/perl5/perlbrew/perls/perl-5.14.2/bin/mojo get [OPTIONS] \
URL [SELECTOR] [COMMANDS]
 mojo get /
 mojo get mojolicio.us
 mojo get -v -r google.com
 mojo get --method POST --content 'content' mojolicio.us
 mojo get --header 'X-Bender: Bite my shiny metal ass!' mojolicio.us
 mojo get mojolicio.us 'head &amp;gt; title' text
 mojo get mojolicio.us .footer all
 mojo get mojolicio.us a attr href
 mojo get mojolicio.us '*' attr id
 mojo get mojolicio.us 'h1, h2, h3' 3 text

These options are available:
 --charset &amp;lt;charset&amp;gt; Charset of HTML5/XML content, defaults to auto
 detection or "UTF-8".
 --content &amp;lt;content&amp;gt; Content to send with request.
 --header &amp;lt;name:value&amp;gt; Additional HTTP header.
 --method &amp;lt;method&amp;gt; HTTP method to use, defaults to "GET".
 --redirect Follow up to 5 redirects.
 --verbose Print verbose debug information to STDERR.&lt;/pre
>
&lt;p>
 First, the name can be a bit awkward when you use it often. I tend to shorten
 it to 'mg':
&lt;/p></description></item><item><title>My first Mojolicious Plugin - Proxy</title><link>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</link><pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2010-12-16-my-first-mojolicious-plugin-proxy/</guid><description>&lt;p>
 A few days ago I uploaded my first Mojolicious plugin to CPAN,&lt;a
 href="http://search.cpan.org/~mramberg/Mojolicious-Plugin-Proxy-0.2/"
 >
 Mojolicious::Plugin::Proxy&lt;/a
 >. My use case was that I am writing a simple single-file html5/javascript
 app, which needed to access a remote JSON feed. When running on a device with
 file:/// URLs, cross-site scripting is not an issue, but when running on a
 web-server, my app is unable to reach that remote JSON feed, so I wrote this
 plugin to allow me to simply proxy JSON requests from the local server to the
 remote one. This is how it works
&lt;/p></description></item></channel></rss>