<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drone on marcus</title><link>https://marcus.means.no/tags/drone/</link><description>Recent content in Drone on marcus</description><generator>Hugo</generator><language>en-us</language><copyright>Code released under the MIT license.</copyright><lastBuildDate>Mon, 10 Mar 2025 21:55:37 +0000</lastBuildDate><atom:link href="https://marcus.means.no/tags/drone/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous Delivery with Drone and Dokku</title><link>https://marcus.means.no/post/2014-05-10-continous-delivery-with-drone-and-dokku/</link><pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate><guid>https://marcus.means.no/post/2014-05-10-continous-delivery-with-drone-and-dokku/</guid><description>&lt;p>A part of my job as CTO of &lt;a href="http://theoutput.co/">Output&lt;/a> is managing our
deployment and production systems. To this end, I&amp;rsquo;ve spent a lot of time
working with virtualization, Docker and automation recently. I&amp;rsquo;ll try to share
some of our experiences here in the months to come. One of our biggest
challenges has been to get a good testing culture internally. To that end, I
wanted a solid solution for CI.&lt;/p>
&lt;p>This seems like a solved problem. Just fire up Jenkins, and you&amp;rsquo;re done.
However, there are always complications. Hard to install dependencies, Selenium
tests, required infrastructure services. That is why I have grown to love
&lt;a href="http://github.com/drone/drone">Drone&lt;/a>. Run your test suite in a clean docker
image every time, cache your dependencies (just like Heroku does), and run a
deploy action of your choice if the test succeed. Drone also supports various
notification mechanisms, including Email (of course), IM and our favorite
Slack.&lt;/p></description></item></channel></rss>